
2025-08-19T18:00:12.102013
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
Make changes to existing code and implement new code in the unified git diff syntax. When implementing new code, First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Output requested code changes and new code in the unified "git diff" syntax. Example:

```diff
--- example.txt
+++ example.txt
@@ -6,3 +6,4 @@
     line content A
     line content B
+    new line added
-    original line X
+    modified line X with changes
@@ -26,4 +27,5 @@
         condition check:
-            action for condition A
+            if certain condition is met:
+                alternative action for condition A
         another condition check:
-            action for condition B
+            modified action for condition B
```

Example of a git diff creating a new file:

```diff
--- /dev/null
+++ new_file.txt
@@ -0,0 +1,3 @@
+First example line
+
+Last example line
```

RULES:
-A program will apply the diffs you generate exactly to the code, so diffs must be precise and unambiguous!
-Every diff must be fenced with triple backtick ```.
-The file names at the beginning of a diff, (lines starting with --- and +++) is the relative path to the file before and after the diff.
-LINES TO BE REMOVED (starting with single -) AND LINES TO BE RETAIN (no starting symbol) HAVE TO REPLICATE THE DIFFED HUNK OF THE CODE EXACTLY LINE BY LINE. KEEP THE NUMBER OF RETAIN LINES SMALL IF POSSIBLE.
-EACH LINE IN THE SOURCE FILES STARTS WITH A LINE NUMBER, WHICH IS NOT PART OF THE SOURCE CODE. NEVER TRANSFER THESE LINE NUMBERS TO THE DIFF HUNKS.
-AVOID STARTING A HUNK WITH AN EMPTY LINE.
-ENSURE ALL CHANGES ARE PROVIDED IN A SINGLE DIFF CHUNK PER FILE TO PREVENT MULTIPLE DIFFS ON THE SAME FILE.


As far as compatible with the user request, start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

```
File: app/__init__.py
1 from flask import Flask
2 from flask import session
3 import os
4 from dotenv import load_dotenv
5 
6 
7 def create_app():
8     load_dotenv()
9     app = Flask(__name__)
10     app.secret_key = os.getenv("FLASK_SECRET_KEY", "fallback-key-for-dev")
11     # Set upload folder and allowed extensions
12     app.config["UPLOAD_FOLDER"] = "./uploads"
13     app.config["ALLOWED_EXTENSIONS"] = {"xlsx", "xls"}
14     app.config["BEARER_ACCESS_TOKEN"] = os.environ.get(
15         "BEARER_ACCESS_TOKEN", "default_secret_key"
16     )
17     # app.config["ENV"] = os.environ.get("FLASK_ENV", "production")
18 
19     with app.app_context():
20         # Import and register blueprints
21         from .routes import main
22         from .auth import auth
23 
24         app.register_blueprint(main)
25         app.register_blueprint(auth)
26 
27     return app
28 

File: app/app.py
1 

File: app/auth.py
1 from flask import Blueprint, request, redirect, url_for, render_template, session, flash
2 from functools import wraps
3 import os
4 import json
5 from dotenv import load_dotenv
6 
7 
8 load_dotenv()
9 
10 auth = Blueprint("auth", __name__)
11 
12 # Hardcoded credentials
13 credentials = json.loads(os.getenv("GANTT_CREDENTIALS"))
14 USERNAME = credentials["username"]
15 PASSWORD = credentials["password"]
16 
17 
18 @auth.route("/login", methods=["GET", "POST"])
19 def login():
20     # if request.method == "POST":
21     # def login(self):
22     #     """Handle user login."""
23     # def login(self):
24     #     """Handle user login."""
25     # def login(self):
26     """Handle user login."""
27     username = request.form.get("username")
28     password = request.form.get("password")
29 
30     if username == USERNAME and password == PASSWORD:
31         session["user"] = username
32         return redirect(url_for("main.index"))
33     else:
34         flash("Invalid username or password", "error")
35         return redirect(url_for("auth.login"))
36 
37     # return render_template("login.html")
38 
39 
40 @auth.route("/logout")
41 def logout():
42     session.pop("user", None)
43     return redirect(url_for("auth.login"))
44 
45 
46 def login_required(f):
47     """Decorator to protect routes that require login."""
48     """Decorator to protect routes that require login."""
49     """Decorator to protect routes that require login."""
50 
51     @wraps(f)
52     def decorated_function(*args, **kwargs):
53         if "user" not in session:
54             return redirect(
55                 url_for("auth.login")
56             )  # Redirect to the login page if not logged in
57         return f(*args, **kwargs)
58 
59     def logout(self):
60         """Handle user logout."""
61 
62     return decorated_function
63 

File: app/continuous_gantt.py
1 import pandas as pd
2 import plotly.express as pex
3 import matplotlib.pyplot as plt
4 from openpyxl import load_workbook
5 from datetime import datetime
6 from matplotlib.pyplot import cm
7 import numpy as np
8 import os
9 from io import BytesIO
10 import logging
11 import textwrap
12 import json
13 import matplotlib.patches as mpatches
14 
15 from flask import Flask, request, jsonify, current_app
16 
17 
18 class ContinuousGantt:
19     """Class to generate Gantt charts."""
20 
21     def wrap_text(self, text, width=20):
22         """Wraps the text to a specified width."""
23         return "\n".join(textwrap.wrap(text, width=width))
24 
25     # projects_df = pd.DataFrame.from_dict(jira_json["data"], orient="index")
26     # with pd.option_context("display.max_columns", None):
27     def __init__(self, jira_data):
28         self.jira_data = jira_data
29 
30     def generate(self):
31         jira_json = self.jira_data
32         # print(projects_df)
33         # projects_df = jira_json.copy(0)
34         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("float")
35         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("Int64")
36         projects_df = jira_json.copy()
37         projects_df = projects_df.reset_index()
38         if projects_df.loc[0, "Parent Project"] != "":
39             projects_df["level_of_effort"] = 1
40 
41         elif (
42             projects_df["level_of_effort"].isnull().all()
43             and projects_df["Parent Project"].isnull().all()
44         ):
45             projects_df["level_of_effort"] = 2
46 
47         projects_df["level_of_effort"] = projects_df["level_of_effort"].astype("Int64")
48         projects_df["stack"] = 0
49         # print(projects_df)
50         projects_df = projects_df.sort_values(
51             ["Start date", "Due date", "level_of_effort"]
52         )
53         projects_df = projects_df.rename(
54             columns={"Start date": "start_date", "Due date": "end_date"}
55         )
56         pd.set_option("display.max_columns", None)
57         pd.options.display.max_colwidth = 200
58 
59         projects_df = projects_df.dropna(subset=["start_date", "end_date"])
60         projects_df["start_date"] = projects_df["start_date"].apply(
61             lambda x: x.replace(" 00:00:00", "")
62         )
63         projects_df["end_date"] = projects_df["end_date"].apply(
64             lambda x: x.replace(" 00:00:00", "")
65         )
66 
67         min_start_date = (
68             projects_df["start_date"]
69             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
70             .min()
71         )
72 
73         max_end_date = (
74             projects_df["end_date"]
75             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
76             .max()
77         )
78 
79         delta = max_end_date - min_start_date
80         length_of_matrix = delta
81 
82         delta = int(delta.total_seconds() / 60 / 60 / 24)
83         height_of_matrix = int(projects_df["level_of_effort"].sum())
84         if height_of_matrix < 7:
85             height_of_matrix = 7
86         rows, cols = (delta, height_of_matrix)
87         arr = [[0] * cols] * rows
88 
89         date_range = pd.date_range(min_start_date, max_end_date)
90 
91         range_list = list(reversed(list(range(0, height_of_matrix))))
92 
93         for z in range(0, len(range_list)):
94             range_list[z] = str(range_list[z])
95 
96         projects_df = projects_df.sort_values(
97             ["start_date", "end_date", "level_of_effort"],
98             ascending=[True, False, True],  # Specify the sorting order for each column
99         )
100         master_plotting_df = pd.DataFrame(
101             data=np.zeros((height_of_matrix, len(date_range)), dtype=int),
102             index=range(height_of_matrix),
103             columns=date_range,
104         )
105 
106         master_plotting_df = master_plotting_df.applymap(lambda x: 0)
107 
108         project_plotting_df = master_plotting_df.copy()
109 
110         # Assign stack levels avoiding overlap
111         for i, row in projects_df.iterrows():
112             start = row["start_date"]
113             end = row["end_date"]
114             effort = int(row["level_of_effort"])
115             date_slice = pd.date_range(start, end)
116 
117             for y in range(height_of_matrix - effort + 1):
118                 row_slice = list(
119                     range(y, y + effort)
120                 )  # keep as integers to match index
121                 try:
122                     slice_df = master_plotting_df.loc[row_slice, date_slice]
123                 except KeyError as e:
124                     logging.error(f"KeyError accessing plotting matrix at row {y}: {e}")
125                     continue
126 
127                 if (slice_df != 0).any().any():
128                     continue  # overlap, try next level
129                 else:
130                     # No conflict – assign and mark
131                     projects_df.at[i, "stack"] = y
132                     master_plotting_df.loc[row_slice, date_slice] = 1
133                     break
134 
135         new_max_height_df = projects_df.copy()
136         new_max_height = projects_df["stack"].max()
137         new_max_height_df = projects_df[projects_df["stack"] == new_max_height]
138         new_max_height_plus_level_of_effort = (
139             int(new_max_height_df["level_of_effort"].max()) + new_max_height
140         )
141 
142         df = projects_df.copy()
143         df = df.reset_index()
144         if df.loc[0, "Parent Project"] != "":
145             unique_parents = df["Parent Project"].unique()
146             parent_color_map = {
147                 parent: cm.rainbow(i / len(unique_parents))
148                 for i, parent in enumerate(unique_parents)
149             }
150             fig, gnt = plt.subplots(figsize=(12, 6))
151 
152             # array = np.linspace(0, 1, len(df))
153             # np.random.shuffle(array)
154 
155             # color = iter(cm.rainbow(array))
156 
157             # df = df.reset_index()
158 
159             for l in range(0, len(df)):
160                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
161                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
162                 status = df.loc[l, "Status"]
163                 parent_project = df.loc[l, "Parent Project"]
164                 parent_color = parent_color_map[parent_project]
165 
166                 if status == "Completed":
167                     color_value = parent_color
168                     edgecolor = parent_color
169                     hatch = ""
170                 elif status == "In Progress":
171                     color_value = "white"
172                     edgecolor = parent_color
173                     hatch = "--"
174 
175                 elif status == "Not Started":
176                     color_value = "white"
177                     edgecolor = parent_color
178                     hatch = ""
179                 else:
180                     color_value = "black"
181                     edgecolor = "black"
182                     hatch = "--"
183                 # Use the wrap_text function to wrap the Title field for the label
184                 gnt.broken_barh(
185                     [
186                         (
187                             pd.to_datetime(start),
188                             pd.to_datetime(finish) - pd.to_datetime(start),
189                         )
190                     ],
191                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
192                     color=color_value,
193                     edgecolor=edgecolor,
194                     hatch=hatch,
195                     linewidth=3,
196                     label=self.wrap_text(df.loc[l, "Title"]),
197                 )
198                 # gnt.broken_barh(
199                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
200                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
201                 #     color=next(color),
202                 #     label=df.loc[l, "Title"],
203                 # )
204 
205                 data = [
206                     (
207                         pd.to_datetime(start),
208                         pd.to_datetime(finish) - pd.to_datetime(start),
209                     )
210                 ]
211 
212                 title_number_map = {
213                     title: str(i + 1) for i, title in enumerate(df["Title"].unique())
214                 }
215                 title_number = title_number_map[df.loc[l, "Title"]]
216                 for x1, x2 in data:
217                     gnt.text(
218                         x=x1 + x2 / 2,
219                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
220                         - int(df.loc[l, "level_of_effort"]) / 2,
221                         s=title_number,
222                         ha="center",
223                         va="center",
224                         color="blue",
225                         fontsize=6,
226                     )
227             gnt.set_xlabel("Date")
228             gnt.set_ylabel(
229                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
230             )
231 
232             parent_legend_handles = [
233                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
234                 for parent, color in parent_color_map.items()
235             ]
236             parent_legend_handles = [
237                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
238                 for parent, color in parent_color_map.items()
239             ]
240             legend2 = gnt.legend(
241                 handles=parent_legend_handles,
242                 loc="lower left",
243                 bbox_to_anchor=(0.0, 0.0),
244                 title="Parent Projects",
245                 prop={"size": 6},
246             )
247             gnt.add_artist(legend2)
248 
249             # Title-number legend
250             title_legend_handles = [
251                 mpatches.Patch(
252                     color="white", label=f"{num}: {wrap_text(title, width=40)}"
253                 )
254                 for title, num in title_number_map.items()
255             ]
256             legend1 = gnt.legend(
257                 handles=title_legend_handles,
258                 loc="upper left",
259                 bbox_to_anchor=(1.02, 1.0),
260                 title="Project Titles",
261                 frameon=False,
262                 prop={"size": 6},
263             )
264             gnt.add_artist(legend1)
265             # Shrink axis tick and label font sizes
266             gnt.tick_params(axis="both", which="major", labelsize=6)
267             gnt.xaxis.label.set_size(6)
268             gnt.yaxis.label.set_size(6)
269             # top_value_benchmark = 0.710 / 10
270             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
271 
272             plt.subplots_adjust(left=0.1, right=0.85, bottom=0.15, top=0.9)
273             # plt.xticks(rotation=45)
274             # plt.show(block=True)
275             # Generate the plot
276             img = BytesIO()
277             plt.savefig(img, format="png", dpi=100)
278 
279             img.seek(0)
280 
281             # (img, flush=True)
282             return img
283 
284         else:
285             fig, gnt = plt.subplots(figsize=(12, 6))  # half the height
286 
287             array = np.linspace(0, 1, len(df))
288             np.random.shuffle(array)
289 
290             color = iter(cm.rainbow(array))
291 
292             # df = df.reset_index()
293 
294             for l in range(0, len(df)):
295                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
296                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
297                 status = df.loc[l, "Status"]
298                 parent_project = df.loc[l, "Parent Project"]
299                 next_color = next(color)
300 
301                 if status == "Completed":
302                     color_value = next_color
303                     edgecolor = next_color
304                     hatch = ""
305                 elif status == "In Progress":
306                     color_value = "white"
307                     edgecolor = next_color
308                     hatch = "--"
309 
310                 elif status == "Not Started":
311                     color_value = "white"
312                     edgecolor = next_color
313                     hatch = ""
314                 else:
315                     color_value = "black"
316                     edgecolor = "black"
317                     hatch = "--"
318                 # Use the wrap_text function to wrap the Title field for the label
319                 gnt.broken_barh(
320                     [
321                         (
322                             pd.to_datetime(start),
323                             pd.to_datetime(finish) - pd.to_datetime(start),
324                         )
325                     ],
326                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
327                     color=color_value,
328                     edgecolor=edgecolor,
329                     hatch=hatch,
330                     linewidth=3,
331                     label=wrap_text(df.loc[l, "Title"]),
332                 )
333                 # gnt.broken_barh(
334                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
335                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
336                 #     color=next(color),
337                 #     label=df.loc[l, "Title"],
338                 # )
339 
340                 data = [
341                     (
342                         pd.to_datetime(start),
343                         pd.to_datetime(finish) - pd.to_datetime(start),
344                     )
345                 ]
346 
347                 for x1, x2 in data:
348                     gnt.text(
349                         x=x1 + x2 / 2,
350                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
351                         - int(df.loc[l, "level_of_effort"]) / 2,
352                         s=wrap_text(df.loc[l, "Title"]),
353                         ha="center",
354                         va="center",
355                         color="blue",
356                         fontsize=6,
357                     )
358             gnt.set_xlabel("Date")
359             gnt.set_ylabel(
360                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
361             )
362 
363             # fig.legend(loc="upper left")
364 
365             # top_value_benchmark = 0.710 / 10
366             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
367 
368             plt.subplots_adjust(left=0.1, right=0.9, bottom=0.2, top=0.9)
369             # plt.xticks(rotation=45)
370             # plt.show(block=True)
371             # Generate the plot
372             img = BytesIO()
373             plt.savefig(img, format="png", dpi=100)
374 
375             img.seek(0)
376 
377             # (img, flush=True)
378             return img
379         # plot_url = base64.b64encode(img.getvalue()).decode("utf8")
380 
381         # Use send_file to return the image for download
382         # return send_file(img, mimetype='image/png', as_attachment=True, download_name='chart.png')
383         # Create static/images directory if it doesn't exist
384         # os.makedirs('static/images', exist_ok=True)
385 
386         # Save the file
387         # plt.savefig('static/images/chart.png')
388 

File: app/ics.py
1 

File: app/jira_api.py
1 from flask import Flask, request, jsonify, current_app
2 import os
3 import requests
4 import re
5 import pandas as pd
6 import numpy as np
7 from dotenv import load_dotenv
8 import os
9 import urllib
10 import urllib
11 
12 
13 # def fetch_API(label, assignee, level):
14 class JiraAPI:
15     """Class to interact with JIRA API."""
16 
17     def __init__(self, label, assignee, level):
18         self.label = label
19         self.assignee = assignee
20         self.level = level
21         self.url = f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'%20AND%20type='Initiative'%20AND%20labels={label}%20AND%20assignee%20IN%20%28%22{assignee}%22%29"
22         self.JIRA_URL = (
23             f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'"
24         )
25         self.BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
26         self.headers = {
27             "Content": "application/json",
28             "Authorization": "Basic " + self.BEARER_ACCESS_TOKEN,
29         }
30 
31     BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
32 
33     def fetch_data(self):
34         """Fetch data from JIRA API."""
35         url = self.url
36         headers = self.headers
37         level = self.level
38 
39         end = "&maxResults=100"
40 
41         # Retrieve the environment variable and set it to the variable `bearer_access_token`
42         bearer_access_token = BEARER_ACCESS_TOKEN
43 
44         # Check if the environment variable is missing
45         if not bearer_access_token:
46             raise ValueError("Environment variable 'BEARER_ACCESS_TOKEN' is not set.")
47 
48         headers = {
49             "Content": "application/json",
50             "Authorization": "Basic " + bearer_access_token,
51         }
52 
53         print(url + "&maxResults=100")
54         # Make the GET request with encoded parameters
55         response = requests.get(url + "&maxResults=100", headers=headers)
56 
57         if response.status_code in [200, 201, 202, 203, 204]:
58             try:
59                 issues = response.json()["issues"]
60             except (KeyError, json.JSONDecodeError) as e:
61                 return jsonify({"message": "Error parsing JIRA response"}), 500
62             # Create DataFrame with additional column for Assignee
63             df = pd.DataFrame(
64                 columns=[
65                     "Title",
66                     "level_of_effort",
67                     "Start date",
68                     "Due date",
69                     "Assignee",
70                     "Status",
71                     "Parent Project",
72                 ]
73             )
74             issues = response.json()["issues"]
75             rows = []
76 
77             for issue in issues:
78                 status = issue["fields"]["status"]["name"]
79                 title = issue["fields"]["summary"]
80                 key = issue["key"]
81 
82                 try:
83                     level_of_effort = (
84                         issue["fields"].get("customfield_10338", {}).get("value", None)
85                     )
86 
87                     print(level_of_effort)
88 
89                     if level_of_effort == "Low":
90                         level_of_effort = 1
91 
92                     elif level_of_effort == "Medium":
93                         level_of_effort = 2
94 
95                     elif level_of_effort == "High":
96                         level_of_effort = 3
97                     else:
98                         level_of_effort = 1
99 
100                 except:
101                     level_of_effort = 2
102                 start_date = issue["fields"].get("customfield_10022", None)
103                 due_date = issue["fields"].get("customfield_10023", None)
104 
105                 if start_date == None:
106                     start_date = issue["fields"].get("customfield_10015", None)
107 
108                 if due_date == None:
109                     due_date = issue["fields"].get("duedate", None)
110 
111                 # Get the assignee's display name if present
112                 assignee = (
113                     issue["fields"].get("assignee", {}).get("displayName", "Unassigned")
114                 )
115 
116                 if level == "subtasks":
117                     project_title = title
118                     child_issues = []
119 
120                     # Use "issueLinkType" if there's a link relationship
121                     child_query = f'parent = "{key}"'
122 
123                     # Alternative: If Initiatives are parents in JIRA
124                     # child_query = f'parent={key}'
125 
126                     child_response = requests.get(
127                         f"{JIRA_URL}%20AND%20{child_query}&maxResults=100",
128                         headers=headers,
129                     ).json()
130 
131                     # print(child_response)
132                     for child_issue in child_response.get("issues", []):
133                         child_issues.append(child_issue)
134 
135                     # print(child_issues)
136                     # Print Child Issues
137                     for child_issue in child_issues:
138                         # empty out values from outer scope
139                         title = ""
140                         status = ""
141                         level_of_effort = ""
142                         start_date = ""
143                         due_date = ""
144 
145                         title = child_issue["fields"]["summary"]
146                         status = child_issue["fields"]["status"]["name"]
147 
148                         try:
149                             level_of_effort = (
150                                 child_issue["fields"]
151                                 .get("customfield_10338", {})
152                                 .get("value", None)
153                             )
154 
155                             if level_of_effort == "Low":
156                                 level_of_effort = 1
157 
158                             elif level_of_effort == "Medium":
159                                 level_of_effort = 2
160 
161                             elif level_of_effort == "High":
162                                 level_of_effort = 3
163                             else:
164                                 level_of_effort = 1
165 
166                         except:
167                             level_of_effort = 2
168 
169                         start_date = child_issue["fields"].get(
170                             "customfield_10022", None
171                         )
172                         due_date = child_issue["fields"].get("customfield_10023", None)
173 
174                         if start_date == None:
175                             start_date = child_issue["fields"].get(
176                                 "customfield_10015", None
177                             )
178 
179                         if due_date == None:
180                             due_date = child_issue["fields"].get("duedate", None)
181 
182                             # Append the row with the new Assignee column
183                         rows.append(
184                             [
185                                 title,
186                                 level_of_effort,
187                                 start_date,
188                                 due_date,
189                                 assignee,
190                                 status,
191                                 project_title,
192                             ]
193                         )
194 
195                 else:
196                     rows.append(
197                         [
198                             title,
199                             level_of_effort,
200                             start_date,
201                             due_date,
202                             assignee,
203                             status,
204                             "",
205                         ]
206                     )
207 
208             # Create DataFrame
209             df = pd.DataFrame(
210                 rows,
211                 columns=[
212                     "Title",
213                     "level_of_effort",
214                     "Start date",
215                     "Due date",
216                     "Assignee",
217                     "Status",
218                     "Parent Project",
219                 ],
220             )
221 
222             # print(df)
223             return jsonify({"status": "success", "data": df.to_dict(orient="index")})
224 
225         else:
226             return jsonify({"message": "JIRA lookup failure.  Check label exists"}), 400
227 

File: app/routes.py
1 from flask import Blueprint, session, render_template, request, jsonify
2 from app.continuous_gantt import ContinuousGantt
3 from app.jira_api import JiraAPI
4 from app.auth import login, login_required, logout
5 import logging
6 
7 
8 main = Blueprint("main", __name__)
9 from werkzeug.utils import secure_filename
10 from .auth import login_required
11 from flask import current_app, send_file
12 import base64
13 
14 from flask import Flask, request, jsonify
15 import os
16 from werkzeug.utils import secure_filename
17 
18 app = Flask(__name__)
19 
20 UPLOAD_FOLDER = "./uploads"
21 ALLOWED_EXTENSIONS = {"xlsx", "xls"}
22 # app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
23 
24 
25 @main.route("/", methods=["GET", "POST"])
26 @login_required
27 def index():
28     return render_template("index.html")
29 
30 
31 def allowed_file(filename):
32     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
33 
34 
35 # @main.route("/", methods=['GET', 'POST'])
36 # @login_required
37 # def index():
38 #     return render_template("index.html")
39 
40 
41 @main.route("/upload", methods=["POST"])
42 @login_required
43 def upload_file():
44     if "file" not in request.files:
45         return jsonify({"message": "No file part"}), 400
46 
47     file = request.files["file"]
48 
49     if file.filename == "":
50         return jsonify({"message": "No selected file"}), 400
51 
52     if file and allowed_file(file.filename):
53         filename = secure_filename(file.filename)
54         file.save(os.path.join(current_app.config["UPLOAD_FOLDER"], filename))
55         return jsonify({"message": "File successfully uploaded"}), 200
56 
57     return jsonify({"message": "Invalid file format"}), 400
58 
59 
60 # @main.route("/fetchAPI", methods=["GET"])
61 # @login_required
62 # def fetchAPI():
63 #     print(request.args["label"])
64 
65 #     response = fetch_API(request.args["label"], request.args["assignee"], request.args['level'])
66 
67 
68 #     return response
69 
70 
71 @main.route("/process", methods=["POST"])
72 @login_required
73 def process(self):
74     """Instantiate and invoke methods from other classes."""
75     label = request.args.get("label")
76     assignee = request.args.get("assignee")
77     level = request.args.get("level")
78 
79     # Instantiate JiraAPI and fetch data
80     jira_api = JiraAPI(label, assignee, level)
81     jira_data = jira_api.fetch_data()
82 
83     # Instantiate ContinuousGantt and generate chart
84     gantt_chart = ContinuousGantt(jira_data)
85     chart_image = gantt_chart.generate()
86 
87     return jsonify({"status": "success", "image_data": chart_image})
88 
89 
90 @app.route("/download-image")
91 def download_image():
92     # Serve the image file from the 'static/images' folder
93     return send_file(
94         "static/images/chart.png",
95         mimetype="image/png",
96         as_attachment=True,
97         download_name="chart.png",
98     )
99 
100 
101 @main.route("/generate", methods=["POST"])
102 def generate():
103     data = request.get_json()
104 
105     if not data:
106         return jsonify({"status": "error", "message": "No data provided"}), 400
107 
108     # Process the data (this part should contain your processing logic)
109     projects_df = data.get("projects_df")
110 
111     # try:
112     # Your logic here
113     # For example, generating a chart and returning the image data
114     # In this case, we will simulate the result for demo purposes
115 
116     result = generate_gantt_chart(projects_df)
117 
118     result.seek(0)
119     img_base64 = base64.b64encode(result.getvalue()).decode("utf-8")
120 
121     return jsonify({"status": "success", "image_data": img_base64})
122     # except Exception as e:
123     #    print(f"Error processing data: {e}")
124     #    return jsonify({"status": "error", "message": str(e)}), 500
125 
126 
127 # @main.route("/generate", methods=["POST"])
128 # def generate():
129 #     # Retrieve the JSON data sent in the request body
130 #     jira_json = request.get_json()  # Get JSON data from the request
131 
132 #     if jira_json is None:
133 #         return jsonify({'status': 'error', 'message': 'No data provided'}), 400
134 
135 #     else:
136 #         print(jira_json)  # Print the JSON to inspect it
137 
138 
139 #         result = generate_gantt_chart(jira_json)
140 
141 
142 #         result.seek(0)
143 #         img_base64 = base64.b64encode(result.getvalue()).decode('utf-8')
144 
145 
146 #         return jsonify({"status": "success", "image_data": img_base64})
147 #         #return send_file(result, mimetype='image/png', as_attachment=True, download_name='chart.png')
148 

File: app/templates/index.html
1 <!--<!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Gantt Chart Generator</title>
7     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
8 </head>
9 <body>
10     <h1>Gantt Chart Generator</h1>
11     <label labelfor="fileInput">Upload Excel File</label>
12     <input type="file" id="fileInput" accept=".xlsx, .xls">
13     <button id="generate-btn">Generate Gantt Chart</button>
14 
15     <script>
16         $(document).ready(function() {
17             $('#generate-btn').click(function() {
18                 $.post('/generate', function(response) {
19                     alert(response.message);
20                 });
21             });
22         });
23     </script>
24 </body>
25 </html>-->
26 
27 <!DOCTYPE html>
28 <html lang="en">
29 <head>
30     <meta charset="UTF-8">
31     <meta name="viewport" content="width=device-width, initial-scale=1.0">
32     <title>Gantt Chart Generator</title>
33     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
34 
35    
36         
37         
38         <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}"> 
39         <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
40       
41     
42 </head>
43 <body>
44     <div id="hourglass" style="display: none;">
45         <div class="spinner"></div>
46     </div>
47     <header>
48         <div class="logo">Tufts Libraries</div> 
49      </header>
50      <div class="content">
51     <h1>Gantt Chart Generator</h1>
52     <!--<div>
53             
54         <label class="label" for="download">Download sample input file:</label>
55         <a href="{{ url_for('static', filename='template.xlsx') }}">Download</a>
56     </div>-->
57         <!--<label for="label" style="width: 10%">Upload Excel File</label>-->
58         <input type="text" id="label" placeholder="Enter project year label, e.g. 'FY25'">
59         <button id="fetch-btn">Refresh Data</button>
60            <!-- New Assignee Dropdown -->
61            <label for="assignee-select">Select Assignee:</label>
62            <select id="assignee-select">
63                <option value="All">All</option>
64                <option value="Michael J. Hemment">Michael J. Hemment</option>
65                <option value="Henry Steele">Henry Steele</option>
66 
67          </select>
68          <select id="level-select">
69             <option value="initiative">Initiative</option>
70             <option value="subtasks">Child Issues of Initiatives</option>
71             
72 
73       </select>
74          <div class="form-row" style="display: none;" id="download-container">
75             <button type="button" id="download-btn">Download Result</button>
76         </div>
77          <!-- Explanation paragraph -->
78          <div id="app-description"><p>
79             This app allows you to visualize your projects for a given period of time by allowing you to stack projects that start before the end date of the previous, on the same line  </p><p>While most Gantt charts have a separate row for each project, this chart uses the y-axis, which is normally synonymous with separate projects, as continuous date ranges such that once one project ends, another can begin, on the same line if room for that project fits there. This allows you to see if you are arranging project start and end dates in the optimal way given bandwidth at given times, and adjust start and end dates in respones if that would make better use of your project time.
80             </p><p>This instance of the Gantt Chart Generator connects to a JIRA instance for which if you install this app on our own system you will need to get a bearer access token and enter into the .env file.</p>
81 
82                 <p>It looks for either project start and end dates, or target start and target end.   Since this is at a project level of granularlity, it is looking only for initiatives.</p>
83 
84                 
85 
86 <!--<p><strong>Download the template file above to see the format to upload your project file in.</strong>  This file can also be fed into the generator.</p>-->
87             </div>
88 
89             <div id="output-wrapper">
90                 <img id="output" src="" />
91             </div>
92             
93             
94     <script>
95         $(document).ready(function() {
96             $('#fetch-btn').click(function() {
97 
98     
99                 $('#hourglass').show();
100 
101    
102                 var label = document.getElementById("label").value;
103                 var assignee = document.getElementById("assignee-select").value;
104                 var level = document.getElementById("level-select").value;
105                 
106                 //alert("Selected Label: " + label + ", Selected Assignee: " + assignee);
107                 let list = [];
108                 if (assignee == "All"){
109 
110                     $('#assignee-select option').each(function() {
111                     if ($(this).val() !== 'All') {
112                         list.push(encodeURIComponent($(this).val()));// This will log each value except "All"
113                             // You can add the value to an array or perform other actions here
114                         }
115                     });
116                     
117                     assignee = `${list.join('","')}`;
118                     
119 
120                     
121                 }
122 
123                 
124 
125                 // Using relative path to avoid cross-origin fetch
126                 $.ajax({
127                     url: '/process', // Ensure this endpoint is handled by your local server
128                     type: 'POST',
129                     data: { label: label, assignee: assignee, level: level },
130                     success: function(response) {
131                         //alert(response.message);
132                         fetch('/generate', { 
133                             method: 'POST',
134                             headers: {
135                                 'Content-Type': 'application/json'
136                             },
137                             body: JSON.stringify({ projects_df: response }) // Use 'body' to send data
138                         })
139                         .then(response => response.json()) // Expecting JSON response
140                         .then(data => {
141                             if (data.status === 'success') {
142                                 $('#hourglass').hide();
143                                 $('#app-description').hide();
144                                 $('#output').attr('src', 'data:image/png;base64,' + data.image_data);
145                                 $('#output').show();
146                                 $('#download-btn').off('click').on('click', function () {
147                                 // Create a Blob from the base64 data and trigger download
148                                     const byteCharacters = atob(data.image_data);  // Decode base64 string
149                                     const byteNumbers = new Array(byteCharacters.length).fill().map((_, i) => byteCharacters.charCodeAt(i));
150                                     const byteArray = new Uint8Array(byteNumbers);
151                                     const blob = new Blob([byteArray], { type: 'image/png' });
152 
153                                     const url = window.URL.createObjectURL(blob);  // Create Blob URL
154                                     const a = document.createElement('a');  // Create <a> element for download
155                                     a.href = url;
156                                     a.download = 'gantt_chart.png';  // Set download filename
157                                     document.body.appendChild(a);
158                                     a.click();  // Simulate click to trigger download
159                                     document.body.removeChild(a);  // Clean up DOM
160                                     window.URL.revokeObjectURL(url);  //
161                                 })
162                             } else {
163                                 throw new Error('Failed to generate the chart');
164                             }
165                         })
166                         .catch(error => {
167                             alert("Error: " + error.message);
168                         });
169                     },
170                     error: function(jqXHR, textStatus, errorThrown) {
171                         alert("Failed to fetch data: " + textStatus);
172                     }
173                 });
174             });
175 
176       
177   
178 });
179 
180 
181     </script>
182 
183     <script>
184     $(document).ready(function() {
185         $('#generate-btn').click(function() {
186             fetch('/generate', {
187                 method: 'POST'
188             })
189             .then(response => {
190                 if (response.ok) {
191                     $('#output').attr('src', 'data:image/png;base64,' + response.image_data);
192                     $('#output').show();
193                     
194                     return response.blob(); // Convert the response to a Blob
195                 } else {
196                     throw new Error('Failed to generate the file');
197                 }
198             })
199             .then(blob => {
200                 // Create a temporary URL for the file
201                 const url = window.URL.createObjectURL(blob);
202                 const a = document.createElement('a');
203                 a.href = url;
204                 a.download = 'chart.png';  // Set the file name for download
205                 document.body.appendChild(a); // Append <a> to body
206                 
207                 a.click(); // Trigger the download
208                 a.remove(); // Remove <a> after download
209                 window.URL.revokeObjectURL(url); // Clean up the URL object
210             })
211             .catch(error => {
212                 alert("Error: " + error.message);
213             });
214         });
215     });
216 </script>
217 </div>
218 </body>
219 </html>
220 

File: app/templates/login.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Login</title>
7     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
8 </head>
9 <body>
10     <div class="content">
11         <h1>Login</h1>
12         {% with messages = get_flashed_messages(with_categories=true) %}
13           {% if messages %}
14             <ul class="flashes">
15             {% for category, message in messages %}
16               <li class="{{ category }}">{{ message }}</li>
17             {% endfor %}
18             </ul>
19           {% endif %}
20         {% endwith %}
21         <form method="POST">
22             <label for="username">Username:</label>
23             <input type="text" name="username" required>
24             <label for="password">Password:</label>
25             <input type="password" name="password" required>
26             <button type="submit">Login</button>
27         </form>
28     </div>
29 </body>
30 </html>

File: wsgi.py
1 from app import create_app
2 
3 app = create_app()
4 
5 if __name__ == "__main__":
6     app.run(host="0.0.0.0", port=5000)
7 

```

Request: The application is continually redirecting when it tries to access the /login route within app/auth.py, which it is sent to by the @login_required decorator's auth.login redirect.   Fix this

================================== Ai Message ==================================

To address the issue of continual redirection when accessing the `/login` route, we need to ensure that the `login_required` decorator correctly identifies when a user is logged in and when they are not. The problem might be due to the session not being set correctly or the decorator not checking the session properly.

Let's go through the necessary changes step by step:

1. **Ensure the session is set correctly upon successful login.**
2. **Ensure the `login_required` decorator checks the session correctly.**
3. **Ensure the `/login` route renders the login page correctly.**

Let's make the necessary changes:

```diff
--- app/auth.py
+++ app/auth.py
@@ -18,7 +18,7 @@
 
 @auth.route("/login", methods=["GET", "POST"])
 def login():
-    # if request.method == "POST":
+    if request.method == "POST":
         username = request.form.get("username")
         password = request.form.get("password")
 
@@ -26,7 +26,7 @@
         if username == USERNAME and password == PASSWORD:
             session["user"] = username
             return redirect(url_for("main.index"))
-        else:
+    else:
         flash("Invalid username or password", "error")
         return redirect(url_for("auth.login"))
 
@@ -34,7 +34,7 @@
         flash("Invalid username or password", "error")
         return redirect(url_for("auth.login"))
 
-    # return render_template("login.html")
+    return render_template("login.html")
 
 
 @auth.route("/logout")
@@ -46,12 +46,7 @@
 
 def login_required(f):
     """Decorator to protect routes that require login."""
-    """Decorator to protect routes that require login."""
-    """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
             return redirect(
                 url_for("auth.login")
             )  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
-    def logout(self):
-        """Handle user logout."""
-
     return decorated_function
```

### Explanation of Changes:

- **Login Route (`/login`):** 
  - The `if request.method == "POST":` condition was uncommented to ensure that the login logic only executes when a POST request is made.
  - The `else` block was corrected to ensure that the flash message and redirect only occur when the credentials are incorrect.
  - The `return render_template("login.html")` was uncommented to ensure that the login page is rendered when a GET request is made.

- **Login Required Decorator:**
  - Removed redundant comments and ensured the decorator checks if the "user" key is in the session. If not, it redirects to the login page.

These changes should resolve the issue of continual redirection by ensuring that the session is correctly set and checked.

### Additional Considerations:

- Ensure that the `session` is correctly configured in your Flask app, especially the `secret_key`, which is necessary for session management.
- Verify that the `.env` file contains the correct credentials and secret key.

This concludes a fully working implementation.

2025-08-19T18:07:40.967924
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
Make changes to existing code and implement new code in the unified git diff syntax. When implementing new code, First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Output requested code changes and new code in the unified "git diff" syntax. Example:

```diff
--- example.txt
+++ example.txt
@@ -6,3 +6,4 @@
     line content A
     line content B
+    new line added
-    original line X
+    modified line X with changes
@@ -26,4 +27,5 @@
         condition check:
-            action for condition A
+            if certain condition is met:
+                alternative action for condition A
         another condition check:
-            action for condition B
+            modified action for condition B
```

Example of a git diff creating a new file:

```diff
--- /dev/null
+++ new_file.txt
@@ -0,0 +1,3 @@
+First example line
+
+Last example line
```

RULES:
-A program will apply the diffs you generate exactly to the code, so diffs must be precise and unambiguous!
-Every diff must be fenced with triple backtick ```.
-The file names at the beginning of a diff, (lines starting with --- and +++) is the relative path to the file before and after the diff.
-LINES TO BE REMOVED (starting with single -) AND LINES TO BE RETAIN (no starting symbol) HAVE TO REPLICATE THE DIFFED HUNK OF THE CODE EXACTLY LINE BY LINE. KEEP THE NUMBER OF RETAIN LINES SMALL IF POSSIBLE.
-EACH LINE IN THE SOURCE FILES STARTS WITH A LINE NUMBER, WHICH IS NOT PART OF THE SOURCE CODE. NEVER TRANSFER THESE LINE NUMBERS TO THE DIFF HUNKS.
-AVOID STARTING A HUNK WITH AN EMPTY LINE.
-ENSURE ALL CHANGES ARE PROVIDED IN A SINGLE DIFF CHUNK PER FILE TO PREVENT MULTIPLE DIFFS ON THE SAME FILE.


As far as compatible with the user request, start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

```
File: app/__init__.py
1 from flask import Flask
2 from flask import session
3 import os
4 from dotenv import load_dotenv
5 
6 
7 def create_app():
8     load_dotenv()
9     app = Flask(__name__)
10     app.secret_key = os.getenv("FLASK_SECRET_KEY", "fallback-key-for-dev")
11     # Set upload folder and allowed extensions
12     app.config["UPLOAD_FOLDER"] = "./uploads"
13     app.config["ALLOWED_EXTENSIONS"] = {"xlsx", "xls"}
14     app.config["BEARER_ACCESS_TOKEN"] = os.environ.get(
15         "BEARER_ACCESS_TOKEN", "default_secret_key"
16     )
17     # app.config["ENV"] = os.environ.get("FLASK_ENV", "production")
18 
19     with app.app_context():
20         # Import and register blueprints
21         from .routes import main
22         from .auth import auth
23 
24         app.register_blueprint(main)
25         app.register_blueprint(auth)
26 
27     return app
28 

File: app/app.py
1 

File: app/auth.py
1 from flask import Blueprint, request, redirect, url_for, render_template, session, flash
2 from functools import wraps
3 import os
4 import json
5 from dotenv import load_dotenv
6 
7 
8 load_dotenv()
9 
10 auth = Blueprint("auth", __name__)
11 
12 # Hardcoded credentials
13 credentials = json.loads(os.getenv("GANTT_CREDENTIALS"))
14 USERNAME = credentials["username"]
15 PASSWORD = credentials["password"]
16 
17 
18 @auth.route("/login", methods=["GET", "POST"])
19 def login():
20     if request.method == "POST":
21     # def login(self):
22     #     """Handle user login."""
23     # def login(self):
24     #     """Handle user login."""
25     # def login(self):
26     """Handle user login."""
27     username = request.form.get("username")
28     password = request.form.get("password")
29 
30     if username == USERNAME and password == PASSWORD:
31         session["user"] = username
32         return redirect(url_for("main.index"))
33     else:
34         flash("Invalid username or password", "error")
35         return redirect(url_for("auth.login"))
36 
37     return render_template("login.html")
38 
39 
40 @auth.route("/logout")
41 def logout():
42     session.pop("user", None)
43     return redirect(url_for("auth.login"))
44 
45 
46 def login_required(f):
47     """Decorator to protect routes that require login."""
48 
49     @wraps(f)
50     def decorated_function(*args, **kwargs):
51         if "user" not in session:
52             return redirect(
53                 url_for("auth.login")
54             )  # Redirect to the login page if not logged in
55         return f(*args, **kwargs)
56 
57     return decorated_function
58 

File: app/continuous_gantt.py
1 import pandas as pd
2 import plotly.express as pex
3 import matplotlib.pyplot as plt
4 from openpyxl import load_workbook
5 from datetime import datetime
6 from matplotlib.pyplot import cm
7 import numpy as np
8 import os
9 from io import BytesIO
10 import logging
11 import textwrap
12 import json
13 import matplotlib.patches as mpatches
14 
15 from flask import Flask, request, jsonify, current_app
16 
17 
18 class ContinuousGantt:
19     """Class to generate Gantt charts."""
20 
21     def wrap_text(self, text, width=20):
22         """Wraps the text to a specified width."""
23         return "\n".join(textwrap.wrap(text, width=width))
24 
25     # projects_df = pd.DataFrame.from_dict(jira_json["data"], orient="index")
26     # with pd.option_context("display.max_columns", None):
27     def __init__(self, jira_data):
28         self.jira_data = jira_data
29 
30     def generate(self):
31         jira_json = self.jira_data
32         # print(projects_df)
33         # projects_df = jira_json.copy(0)
34         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("float")
35         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("Int64")
36         projects_df = jira_json.copy()
37         projects_df = projects_df.reset_index()
38         if projects_df.loc[0, "Parent Project"] != "":
39             projects_df["level_of_effort"] = 1
40 
41         elif (
42             projects_df["level_of_effort"].isnull().all()
43             and projects_df["Parent Project"].isnull().all()
44         ):
45             projects_df["level_of_effort"] = 2
46 
47         projects_df["level_of_effort"] = projects_df["level_of_effort"].astype("Int64")
48         projects_df["stack"] = 0
49         # print(projects_df)
50         projects_df = projects_df.sort_values(
51             ["Start date", "Due date", "level_of_effort"]
52         )
53         projects_df = projects_df.rename(
54             columns={"Start date": "start_date", "Due date": "end_date"}
55         )
56         pd.set_option("display.max_columns", None)
57         pd.options.display.max_colwidth = 200
58 
59         projects_df = projects_df.dropna(subset=["start_date", "end_date"])
60         projects_df["start_date"] = projects_df["start_date"].apply(
61             lambda x: x.replace(" 00:00:00", "")
62         )
63         projects_df["end_date"] = projects_df["end_date"].apply(
64             lambda x: x.replace(" 00:00:00", "")
65         )
66 
67         min_start_date = (
68             projects_df["start_date"]
69             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
70             .min()
71         )
72 
73         max_end_date = (
74             projects_df["end_date"]
75             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
76             .max()
77         )
78 
79         delta = max_end_date - min_start_date
80         length_of_matrix = delta
81 
82         delta = int(delta.total_seconds() / 60 / 60 / 24)
83         height_of_matrix = int(projects_df["level_of_effort"].sum())
84         if height_of_matrix < 7:
85             height_of_matrix = 7
86         rows, cols = (delta, height_of_matrix)
87         arr = [[0] * cols] * rows
88 
89         date_range = pd.date_range(min_start_date, max_end_date)
90 
91         range_list = list(reversed(list(range(0, height_of_matrix))))
92 
93         for z in range(0, len(range_list)):
94             range_list[z] = str(range_list[z])
95 
96         projects_df = projects_df.sort_values(
97             ["start_date", "end_date", "level_of_effort"],
98             ascending=[True, False, True],  # Specify the sorting order for each column
99         )
100         master_plotting_df = pd.DataFrame(
101             data=np.zeros((height_of_matrix, len(date_range)), dtype=int),
102             index=range(height_of_matrix),
103             columns=date_range,
104         )
105 
106         master_plotting_df = master_plotting_df.applymap(lambda x: 0)
107 
108         project_plotting_df = master_plotting_df.copy()
109 
110         # Assign stack levels avoiding overlap
111         for i, row in projects_df.iterrows():
112             start = row["start_date"]
113             end = row["end_date"]
114             effort = int(row["level_of_effort"])
115             date_slice = pd.date_range(start, end)
116 
117             for y in range(height_of_matrix - effort + 1):
118                 row_slice = list(
119                     range(y, y + effort)
120                 )  # keep as integers to match index
121                 try:
122                     slice_df = master_plotting_df.loc[row_slice, date_slice]
123                 except KeyError as e:
124                     logging.error(f"KeyError accessing plotting matrix at row {y}: {e}")
125                     continue
126 
127                 if (slice_df != 0).any().any():
128                     continue  # overlap, try next level
129                 else:
130                     # No conflict – assign and mark
131                     projects_df.at[i, "stack"] = y
132                     master_plotting_df.loc[row_slice, date_slice] = 1
133                     break
134 
135         new_max_height_df = projects_df.copy()
136         new_max_height = projects_df["stack"].max()
137         new_max_height_df = projects_df[projects_df["stack"] == new_max_height]
138         new_max_height_plus_level_of_effort = (
139             int(new_max_height_df["level_of_effort"].max()) + new_max_height
140         )
141 
142         df = projects_df.copy()
143         df = df.reset_index()
144         if df.loc[0, "Parent Project"] != "":
145             unique_parents = df["Parent Project"].unique()
146             parent_color_map = {
147                 parent: cm.rainbow(i / len(unique_parents))
148                 for i, parent in enumerate(unique_parents)
149             }
150             fig, gnt = plt.subplots(figsize=(12, 6))
151 
152             # array = np.linspace(0, 1, len(df))
153             # np.random.shuffle(array)
154 
155             # color = iter(cm.rainbow(array))
156 
157             # df = df.reset_index()
158 
159             for l in range(0, len(df)):
160                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
161                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
162                 status = df.loc[l, "Status"]
163                 parent_project = df.loc[l, "Parent Project"]
164                 parent_color = parent_color_map[parent_project]
165 
166                 if status == "Completed":
167                     color_value = parent_color
168                     edgecolor = parent_color
169                     hatch = ""
170                 elif status == "In Progress":
171                     color_value = "white"
172                     edgecolor = parent_color
173                     hatch = "--"
174 
175                 elif status == "Not Started":
176                     color_value = "white"
177                     edgecolor = parent_color
178                     hatch = ""
179                 else:
180                     color_value = "black"
181                     edgecolor = "black"
182                     hatch = "--"
183                 # Use the wrap_text function to wrap the Title field for the label
184                 gnt.broken_barh(
185                     [
186                         (
187                             pd.to_datetime(start),
188                             pd.to_datetime(finish) - pd.to_datetime(start),
189                         )
190                     ],
191                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
192                     color=color_value,
193                     edgecolor=edgecolor,
194                     hatch=hatch,
195                     linewidth=3,
196                     label=self.wrap_text(df.loc[l, "Title"]),
197                 )
198                 # gnt.broken_barh(
199                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
200                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
201                 #     color=next(color),
202                 #     label=df.loc[l, "Title"],
203                 # )
204 
205                 data = [
206                     (
207                         pd.to_datetime(start),
208                         pd.to_datetime(finish) - pd.to_datetime(start),
209                     )
210                 ]
211 
212                 title_number_map = {
213                     title: str(i + 1) for i, title in enumerate(df["Title"].unique())
214                 }
215                 title_number = title_number_map[df.loc[l, "Title"]]
216                 for x1, x2 in data:
217                     gnt.text(
218                         x=x1 + x2 / 2,
219                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
220                         - int(df.loc[l, "level_of_effort"]) / 2,
221                         s=title_number,
222                         ha="center",
223                         va="center",
224                         color="blue",
225                         fontsize=6,
226                     )
227             gnt.set_xlabel("Date")
228             gnt.set_ylabel(
229                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
230             )
231 
232             parent_legend_handles = [
233                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
234                 for parent, color in parent_color_map.items()
235             ]
236             parent_legend_handles = [
237                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
238                 for parent, color in parent_color_map.items()
239             ]
240             legend2 = gnt.legend(
241                 handles=parent_legend_handles,
242                 loc="lower left",
243                 bbox_to_anchor=(0.0, 0.0),
244                 title="Parent Projects",
245                 prop={"size": 6},
246             )
247             gnt.add_artist(legend2)
248 
249             # Title-number legend
250             title_legend_handles = [
251                 mpatches.Patch(
252                     color="white", label=f"{num}: {wrap_text(title, width=40)}"
253                 )
254                 for title, num in title_number_map.items()
255             ]
256             legend1 = gnt.legend(
257                 handles=title_legend_handles,
258                 loc="upper left",
259                 bbox_to_anchor=(1.02, 1.0),
260                 title="Project Titles",
261                 frameon=False,
262                 prop={"size": 6},
263             )
264             gnt.add_artist(legend1)
265             # Shrink axis tick and label font sizes
266             gnt.tick_params(axis="both", which="major", labelsize=6)
267             gnt.xaxis.label.set_size(6)
268             gnt.yaxis.label.set_size(6)
269             # top_value_benchmark = 0.710 / 10
270             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
271 
272             plt.subplots_adjust(left=0.1, right=0.85, bottom=0.15, top=0.9)
273             # plt.xticks(rotation=45)
274             # plt.show(block=True)
275             # Generate the plot
276             img = BytesIO()
277             plt.savefig(img, format="png", dpi=100)
278 
279             img.seek(0)
280 
281             # (img, flush=True)
282             return img
283 
284         else:
285             fig, gnt = plt.subplots(figsize=(12, 6))  # half the height
286 
287             array = np.linspace(0, 1, len(df))
288             np.random.shuffle(array)
289 
290             color = iter(cm.rainbow(array))
291 
292             # df = df.reset_index()
293 
294             for l in range(0, len(df)):
295                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
296                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
297                 status = df.loc[l, "Status"]
298                 parent_project = df.loc[l, "Parent Project"]
299                 next_color = next(color)
300 
301                 if status == "Completed":
302                     color_value = next_color
303                     edgecolor = next_color
304                     hatch = ""
305                 elif status == "In Progress":
306                     color_value = "white"
307                     edgecolor = next_color
308                     hatch = "--"
309 
310                 elif status == "Not Started":
311                     color_value = "white"
312                     edgecolor = next_color
313                     hatch = ""
314                 else:
315                     color_value = "black"
316                     edgecolor = "black"
317                     hatch = "--"
318                 # Use the wrap_text function to wrap the Title field for the label
319                 gnt.broken_barh(
320                     [
321                         (
322                             pd.to_datetime(start),
323                             pd.to_datetime(finish) - pd.to_datetime(start),
324                         )
325                     ],
326                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
327                     color=color_value,
328                     edgecolor=edgecolor,
329                     hatch=hatch,
330                     linewidth=3,
331                     label=wrap_text(df.loc[l, "Title"]),
332                 )
333                 # gnt.broken_barh(
334                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
335                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
336                 #     color=next(color),
337                 #     label=df.loc[l, "Title"],
338                 # )
339 
340                 data = [
341                     (
342                         pd.to_datetime(start),
343                         pd.to_datetime(finish) - pd.to_datetime(start),
344                     )
345                 ]
346 
347                 for x1, x2 in data:
348                     gnt.text(
349                         x=x1 + x2 / 2,
350                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
351                         - int(df.loc[l, "level_of_effort"]) / 2,
352                         s=wrap_text(df.loc[l, "Title"]),
353                         ha="center",
354                         va="center",
355                         color="blue",
356                         fontsize=6,
357                     )
358             gnt.set_xlabel("Date")
359             gnt.set_ylabel(
360                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
361             )
362 
363             # fig.legend(loc="upper left")
364 
365             # top_value_benchmark = 0.710 / 10
366             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
367 
368             plt.subplots_adjust(left=0.1, right=0.9, bottom=0.2, top=0.9)
369             # plt.xticks(rotation=45)
370             # plt.show(block=True)
371             # Generate the plot
372             img = BytesIO()
373             plt.savefig(img, format="png", dpi=100)
374 
375             img.seek(0)
376 
377             # (img, flush=True)
378             return img
379         # plot_url = base64.b64encode(img.getvalue()).decode("utf8")
380 
381         # Use send_file to return the image for download
382         # return send_file(img, mimetype='image/png', as_attachment=True, download_name='chart.png')
383         # Create static/images directory if it doesn't exist
384         # os.makedirs('static/images', exist_ok=True)
385 
386         # Save the file
387         # plt.savefig('static/images/chart.png')
388 

File: app/ics.py
1 

File: app/jira_api.py
1 from flask import Flask, request, jsonify, current_app
2 import os
3 import requests
4 import re
5 import pandas as pd
6 import numpy as np
7 from dotenv import load_dotenv
8 import os
9 import urllib
10 import urllib
11 
12 
13 # def fetch_API(label, assignee, level):
14 class JiraAPI:
15     """Class to interact with JIRA API."""
16 
17     def __init__(self, label, assignee, level):
18         self.label = label
19         self.assignee = assignee
20         self.level = level
21         self.url = f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'%20AND%20type='Initiative'%20AND%20labels={label}%20AND%20assignee%20IN%20%28%22{assignee}%22%29"
22         self.JIRA_URL = (
23             f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'"
24         )
25         self.BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
26         self.headers = {
27             "Content": "application/json",
28             "Authorization": "Basic " + self.BEARER_ACCESS_TOKEN,
29         }
30 
31     BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
32 
33     def fetch_data(self):
34         """Fetch data from JIRA API."""
35         url = self.url
36         headers = self.headers
37         level = self.level
38 
39         end = "&maxResults=100"
40 
41         # Retrieve the environment variable and set it to the variable `bearer_access_token`
42         bearer_access_token = BEARER_ACCESS_TOKEN
43 
44         # Check if the environment variable is missing
45         if not bearer_access_token:
46             raise ValueError("Environment variable 'BEARER_ACCESS_TOKEN' is not set.")
47 
48         headers = {
49             "Content": "application/json",
50             "Authorization": "Basic " + bearer_access_token,
51         }
52 
53         print(url + "&maxResults=100")
54         # Make the GET request with encoded parameters
55         response = requests.get(url + "&maxResults=100", headers=headers)
56 
57         if response.status_code in [200, 201, 202, 203, 204]:
58             try:
59                 issues = response.json()["issues"]
60             except (KeyError, json.JSONDecodeError) as e:
61                 return jsonify({"message": "Error parsing JIRA response"}), 500
62             # Create DataFrame with additional column for Assignee
63             df = pd.DataFrame(
64                 columns=[
65                     "Title",
66                     "level_of_effort",
67                     "Start date",
68                     "Due date",
69                     "Assignee",
70                     "Status",
71                     "Parent Project",
72                 ]
73             )
74             issues = response.json()["issues"]
75             rows = []
76 
77             for issue in issues:
78                 status = issue["fields"]["status"]["name"]
79                 title = issue["fields"]["summary"]
80                 key = issue["key"]
81 
82                 try:
83                     level_of_effort = (
84                         issue["fields"].get("customfield_10338", {}).get("value", None)
85                     )
86 
87                     print(level_of_effort)
88 
89                     if level_of_effort == "Low":
90                         level_of_effort = 1
91 
92                     elif level_of_effort == "Medium":
93                         level_of_effort = 2
94 
95                     elif level_of_effort == "High":
96                         level_of_effort = 3
97                     else:
98                         level_of_effort = 1
99 
100                 except:
101                     level_of_effort = 2
102                 start_date = issue["fields"].get("customfield_10022", None)
103                 due_date = issue["fields"].get("customfield_10023", None)
104 
105                 if start_date == None:
106                     start_date = issue["fields"].get("customfield_10015", None)
107 
108                 if due_date == None:
109                     due_date = issue["fields"].get("duedate", None)
110 
111                 # Get the assignee's display name if present
112                 assignee = (
113                     issue["fields"].get("assignee", {}).get("displayName", "Unassigned")
114                 )
115 
116                 if level == "subtasks":
117                     project_title = title
118                     child_issues = []
119 
120                     # Use "issueLinkType" if there's a link relationship
121                     child_query = f'parent = "{key}"'
122 
123                     # Alternative: If Initiatives are parents in JIRA
124                     # child_query = f'parent={key}'
125 
126                     child_response = requests.get(
127                         f"{JIRA_URL}%20AND%20{child_query}&maxResults=100",
128                         headers=headers,
129                     ).json()
130 
131                     # print(child_response)
132                     for child_issue in child_response.get("issues", []):
133                         child_issues.append(child_issue)
134 
135                     # print(child_issues)
136                     # Print Child Issues
137                     for child_issue in child_issues:
138                         # empty out values from outer scope
139                         title = ""
140                         status = ""
141                         level_of_effort = ""
142                         start_date = ""
143                         due_date = ""
144 
145                         title = child_issue["fields"]["summary"]
146                         status = child_issue["fields"]["status"]["name"]
147 
148                         try:
149                             level_of_effort = (
150                                 child_issue["fields"]
151                                 .get("customfield_10338", {})
152                                 .get("value", None)
153                             )
154 
155                             if level_of_effort == "Low":
156                                 level_of_effort = 1
157 
158                             elif level_of_effort == "Medium":
159                                 level_of_effort = 2
160 
161                             elif level_of_effort == "High":
162                                 level_of_effort = 3
163                             else:
164                                 level_of_effort = 1
165 
166                         except:
167                             level_of_effort = 2
168 
169                         start_date = child_issue["fields"].get(
170                             "customfield_10022", None
171                         )
172                         due_date = child_issue["fields"].get("customfield_10023", None)
173 
174                         if start_date == None:
175                             start_date = child_issue["fields"].get(
176                                 "customfield_10015", None
177                             )
178 
179                         if due_date == None:
180                             due_date = child_issue["fields"].get("duedate", None)
181 
182                             # Append the row with the new Assignee column
183                         rows.append(
184                             [
185                                 title,
186                                 level_of_effort,
187                                 start_date,
188                                 due_date,
189                                 assignee,
190                                 status,
191                                 project_title,
192                             ]
193                         )
194 
195                 else:
196                     rows.append(
197                         [
198                             title,
199                             level_of_effort,
200                             start_date,
201                             due_date,
202                             assignee,
203                             status,
204                             "",
205                         ]
206                     )
207 
208             # Create DataFrame
209             df = pd.DataFrame(
210                 rows,
211                 columns=[
212                     "Title",
213                     "level_of_effort",
214                     "Start date",
215                     "Due date",
216                     "Assignee",
217                     "Status",
218                     "Parent Project",
219                 ],
220             )
221 
222             # print(df)
223             return jsonify({"status": "success", "data": df.to_dict(orient="index")})
224 
225         else:
226             return jsonify({"message": "JIRA lookup failure.  Check label exists"}), 400
227 

File: app/routes.py
1 from flask import Blueprint, session, render_template, request, jsonify
2 from app.continuous_gantt import ContinuousGantt
3 from app.jira_api import JiraAPI
4 from app.auth import login, login_required, logout
5 import logging
6 
7 
8 main = Blueprint("main", __name__)
9 from werkzeug.utils import secure_filename
10 from .auth import login_required
11 from flask import current_app, send_file
12 import base64
13 
14 from flask import Flask, request, jsonify
15 import os
16 from werkzeug.utils import secure_filename
17 
18 app = Flask(__name__)
19 
20 UPLOAD_FOLDER = "./uploads"
21 ALLOWED_EXTENSIONS = {"xlsx", "xls"}
22 # app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
23 
24 
25 @main.route("/", methods=["GET", "POST"])
26 @login_required
27 def index():
28     return render_template("index.html")
29 
30 
31 def allowed_file(filename):
32     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
33 
34 
35 # @main.route("/", methods=['GET', 'POST'])
36 # @login_required
37 # def index():
38 #     return render_template("index.html")
39 
40 
41 @main.route("/upload", methods=["POST"])
42 @login_required
43 def upload_file():
44     if "file" not in request.files:
45         return jsonify({"message": "No file part"}), 400
46 
47     file = request.files["file"]
48 
49     if file.filename == "":
50         return jsonify({"message": "No selected file"}), 400
51 
52     if file and allowed_file(file.filename):
53         filename = secure_filename(file.filename)
54         file.save(os.path.join(current_app.config["UPLOAD_FOLDER"], filename))
55         return jsonify({"message": "File successfully uploaded"}), 200
56 
57     return jsonify({"message": "Invalid file format"}), 400
58 
59 
60 # @main.route("/fetchAPI", methods=["GET"])
61 # @login_required
62 # def fetchAPI():
63 #     print(request.args["label"])
64 
65 #     response = fetch_API(request.args["label"], request.args["assignee"], request.args['level'])
66 
67 
68 #     return response
69 
70 
71 @main.route("/process", methods=["POST"])
72 @login_required
73 def process(self):
74     """Instantiate and invoke methods from other classes."""
75     label = request.args.get("label")
76     assignee = request.args.get("assignee")
77     level = request.args.get("level")
78 
79     # Instantiate JiraAPI and fetch data
80     jira_api = JiraAPI(label, assignee, level)
81     jira_data = jira_api.fetch_data()
82 
83     # Instantiate ContinuousGantt and generate chart
84     gantt_chart = ContinuousGantt(jira_data)
85     chart_image = gantt_chart.generate()
86 
87     return jsonify({"status": "success", "image_data": chart_image})
88 
89 
90 @app.route("/download-image")
91 def download_image():
92     # Serve the image file from the 'static/images' folder
93     return send_file(
94         "static/images/chart.png",
95         mimetype="image/png",
96         as_attachment=True,
97         download_name="chart.png",
98     )
99 
100 
101 @main.route("/generate", methods=["POST"])
102 def generate():
103     data = request.get_json()
104 
105     if not data:
106         return jsonify({"status": "error", "message": "No data provided"}), 400
107 
108     # Process the data (this part should contain your processing logic)
109     projects_df = data.get("projects_df")
110 
111     # try:
112     # Your logic here
113     # For example, generating a chart and returning the image data
114     # In this case, we will simulate the result for demo purposes
115 
116     result = generate_gantt_chart(projects_df)
117 
118     result.seek(0)
119     img_base64 = base64.b64encode(result.getvalue()).decode("utf-8")
120 
121     return jsonify({"status": "success", "image_data": img_base64})
122     # except Exception as e:
123     #    print(f"Error processing data: {e}")
124     #    return jsonify({"status": "error", "message": str(e)}), 500
125 
126 
127 # @main.route("/generate", methods=["POST"])
128 # def generate():
129 #     # Retrieve the JSON data sent in the request body
130 #     jira_json = request.get_json()  # Get JSON data from the request
131 
132 #     if jira_json is None:
133 #         return jsonify({'status': 'error', 'message': 'No data provided'}), 400
134 
135 #     else:
136 #         print(jira_json)  # Print the JSON to inspect it
137 
138 
139 #         result = generate_gantt_chart(jira_json)
140 
141 
142 #         result.seek(0)
143 #         img_base64 = base64.b64encode(result.getvalue()).decode('utf-8')
144 
145 
146 #         return jsonify({"status": "success", "image_data": img_base64})
147 #         #return send_file(result, mimetype='image/png', as_attachment=True, download_name='chart.png')
148 

File: app/templates/index.html
1 <!--<!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Gantt Chart Generator</title>
7     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
8 </head>
9 <body>
10     <h1>Gantt Chart Generator</h1>
11     <label labelfor="fileInput">Upload Excel File</label>
12     <input type="file" id="fileInput" accept=".xlsx, .xls">
13     <button id="generate-btn">Generate Gantt Chart</button>
14 
15     <script>
16         $(document).ready(function() {
17             $('#generate-btn').click(function() {
18                 $.post('/generate', function(response) {
19                     alert(response.message);
20                 });
21             });
22         });
23     </script>
24 </body>
25 </html>-->
26 
27 <!DOCTYPE html>
28 <html lang="en">
29 <head>
30     <meta charset="UTF-8">
31     <meta name="viewport" content="width=device-width, initial-scale=1.0">
32     <title>Gantt Chart Generator</title>
33     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
34 
35    
36         
37         
38         <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}"> 
39         <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
40       
41     
42 </head>
43 <body>
44     <div id="hourglass" style="display: none;">
45         <div class="spinner"></div>
46     </div>
47     <header>
48         <div class="logo">Tufts Libraries</div> 
49      </header>
50      <div class="content">
51     <h1>Gantt Chart Generator</h1>
52     <!--<div>
53             
54         <label class="label" for="download">Download sample input file:</label>
55         <a href="{{ url_for('static', filename='template.xlsx') }}">Download</a>
56     </div>-->
57         <!--<label for="label" style="width: 10%">Upload Excel File</label>-->
58         <input type="text" id="label" placeholder="Enter project year label, e.g. 'FY25'">
59         <button id="fetch-btn">Refresh Data</button>
60            <!-- New Assignee Dropdown -->
61            <label for="assignee-select">Select Assignee:</label>
62            <select id="assignee-select">
63                <option value="All">All</option>
64                <option value="Michael J. Hemment">Michael J. Hemment</option>
65                <option value="Henry Steele">Henry Steele</option>
66 
67          </select>
68          <select id="level-select">
69             <option value="initiative">Initiative</option>
70             <option value="subtasks">Child Issues of Initiatives</option>
71             
72 
73       </select>
74          <div class="form-row" style="display: none;" id="download-container">
75             <button type="button" id="download-btn">Download Result</button>
76         </div>
77          <!-- Explanation paragraph -->
78          <div id="app-description"><p>
79             This app allows you to visualize your projects for a given period of time by allowing you to stack projects that start before the end date of the previous, on the same line  </p><p>While most Gantt charts have a separate row for each project, this chart uses the y-axis, which is normally synonymous with separate projects, as continuous date ranges such that once one project ends, another can begin, on the same line if room for that project fits there. This allows you to see if you are arranging project start and end dates in the optimal way given bandwidth at given times, and adjust start and end dates in respones if that would make better use of your project time.
80             </p><p>This instance of the Gantt Chart Generator connects to a JIRA instance for which if you install this app on our own system you will need to get a bearer access token and enter into the .env file.</p>
81 
82                 <p>It looks for either project start and end dates, or target start and target end.   Since this is at a project level of granularlity, it is looking only for initiatives.</p>
83 
84                 
85 
86 <!--<p><strong>Download the template file above to see the format to upload your project file in.</strong>  This file can also be fed into the generator.</p>-->
87             </div>
88 
89             <div id="output-wrapper">
90                 <img id="output" src="" />
91             </div>
92             
93             
94     <script>
95         $(document).ready(function() {
96             $('#fetch-btn').click(function() {
97 
98     
99                 $('#hourglass').show();
100 
101    
102                 var label = document.getElementById("label").value;
103                 var assignee = document.getElementById("assignee-select").value;
104                 var level = document.getElementById("level-select").value;
105                 
106                 //alert("Selected Label: " + label + ", Selected Assignee: " + assignee);
107                 let list = [];
108                 if (assignee == "All"){
109 
110                     $('#assignee-select option').each(function() {
111                     if ($(this).val() !== 'All') {
112                         list.push(encodeURIComponent($(this).val()));// This will log each value except "All"
113                             // You can add the value to an array or perform other actions here
114                         }
115                     });
116                     
117                     assignee = `${list.join('","')}`;
118                     
119 
120                     
121                 }
122 
123                 
124 
125                 // Using relative path to avoid cross-origin fetch
126                 $.ajax({
127                     url: '/process', // Ensure this endpoint is handled by your local server
128                     type: 'POST',
129                     data: { label: label, assignee: assignee, level: level },
130                     success: function(response) {
131                         //alert(response.message);
132                         fetch('/generate', { 
133                             method: 'POST',
134                             headers: {
135                                 'Content-Type': 'application/json'
136                             },
137                             body: JSON.stringify({ projects_df: response }) // Use 'body' to send data
138                         })
139                         .then(response => response.json()) // Expecting JSON response
140                         .then(data => {
141                             if (data.status === 'success') {
142                                 $('#hourglass').hide();
143                                 $('#app-description').hide();
144                                 $('#output').attr('src', 'data:image/png;base64,' + data.image_data);
145                                 $('#output').show();
146                                 $('#download-btn').off('click').on('click', function () {
147                                 // Create a Blob from the base64 data and trigger download
148                                     const byteCharacters = atob(data.image_data);  // Decode base64 string
149                                     const byteNumbers = new Array(byteCharacters.length).fill().map((_, i) => byteCharacters.charCodeAt(i));
150                                     const byteArray = new Uint8Array(byteNumbers);
151                                     const blob = new Blob([byteArray], { type: 'image/png' });
152 
153                                     const url = window.URL.createObjectURL(blob);  // Create Blob URL
154                                     const a = document.createElement('a');  // Create <a> element for download
155                                     a.href = url;
156                                     a.download = 'gantt_chart.png';  // Set download filename
157                                     document.body.appendChild(a);
158                                     a.click();  // Simulate click to trigger download
159                                     document.body.removeChild(a);  // Clean up DOM
160                                     window.URL.revokeObjectURL(url);  //
161                                 })
162                             } else {
163                                 throw new Error('Failed to generate the chart');
164                             }
165                         })
166                         .catch(error => {
167                             alert("Error: " + error.message);
168                         });
169                     },
170                     error: function(jqXHR, textStatus, errorThrown) {
171                         alert("Failed to fetch data: " + textStatus);
172                     }
173                 });
174             });
175 
176       
177   
178 });
179 
180 
181     </script>
182 
183     <script>
184     $(document).ready(function() {
185         $('#generate-btn').click(function() {
186             fetch('/generate', {
187                 method: 'POST'
188             })
189             .then(response => {
190                 if (response.ok) {
191                     $('#output').attr('src', 'data:image/png;base64,' + response.image_data);
192                     $('#output').show();
193                     
194                     return response.blob(); // Convert the response to a Blob
195                 } else {
196                     throw new Error('Failed to generate the file');
197                 }
198             })
199             .then(blob => {
200                 // Create a temporary URL for the file
201                 const url = window.URL.createObjectURL(blob);
202                 const a = document.createElement('a');
203                 a.href = url;
204                 a.download = 'chart.png';  // Set the file name for download
205                 document.body.appendChild(a); // Append <a> to body
206                 
207                 a.click(); // Trigger the download
208                 a.remove(); // Remove <a> after download
209                 window.URL.revokeObjectURL(url); // Clean up the URL object
210             })
211             .catch(error => {
212                 alert("Error: " + error.message);
213             });
214         });
215     });
216 </script>
217 </div>
218 </body>
219 </html>
220 

File: app/templates/login.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Login</title>
7     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
8 </head>
9 <body>
10     <div class="content">
11         <h1>Login</h1>
12         {% with messages = get_flashed_messages(with_categories=true) %}
13           {% if messages %}
14             <ul class="flashes">
15             {% for category, message in messages %}
16               <li class="{{ category }}">{{ message }}</li>
17             {% endfor %}
18             </ul>
19           {% endif %}
20         {% endwith %}
21         <form method="POST">
22             <label for="username">Username:</label>
23             <input type="text" name="username" required>
24             <label for="password">Password:</label>
25             <input type="password" name="password" required>
26             <button type="submit">Login</button>
27         </form>
28     </div>
29 </body>
30 </html>

File: wsgi.py
1 from app import create_app
2 
3 app = create_app()
4 
5 if __name__ == "__main__":
6     app.run(host="0.0.0.0", port=5000)
7 

```

Request: why is this saying missing required argument "self" in auth line 52

================================== Ai Message ==================================

The error message "missing required argument 'self'" typically occurs when a method that is supposed to be an instance method of a class is called without an instance. In Python, instance methods must have `self` as their first parameter, which refers to the instance of the class.

In the provided code, the error is likely due to the `login_required` decorator being applied to a function that is not part of a class, but the decorator is expecting it to be a method of a class. The `login_required` decorator is defined in `app/auth.py` and is applied to the `index` and `upload_file` functions in `app/routes.py`.

To resolve this issue, we need to ensure that the `login_required` decorator is correctly applied to functions that are not methods of a class. We can do this by modifying the `login_required` decorator to work with functions that are not part of a class.

Let's make the necessary changes:

1. Modify the `login_required` decorator in `app/auth.py` to ensure it works with functions that are not part of a class.
2. Ensure that the `index` and `upload_file` functions in `app/routes.py` are correctly decorated.

Here's the updated code:

```diff
--- app/auth.py
+++ app/auth.py
@@ -46,13 +46,13 @@
 
 def login_required(f):
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
```

The `login_required` decorator is already correctly implemented to work with functions that are not part of a class. The issue might have been a misunderstanding of how the decorator is applied.

Now, let's ensure that the `index` and `upload_file` functions in `app/routes.py` are correctly decorated:

```diff
--- app/routes.py
+++ app/routes.py
@@ -25,7 +25,7 @@
 
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
 
 def allowed_file(filename):
     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
@@ -41,7 +41,7 @@
 
 @main.route("/upload", methods=["POST"])
 @login_required
 def upload_file():
     if "file" not in request.files:
         return jsonify({"message": "No file part"}), 400
 
     file = request.files["file"]
```

The `login_required` decorator is correctly applied to both the `index` and `upload_file` functions. If you are still encountering the error, ensure that the `login_required` decorator is not being used in a context where it expects a class method.

This concludes a fully working implementation.

2025-08-19T18:07:48.384130
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
Make changes to existing code and implement new code in the unified git diff syntax. When implementing new code, First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Output requested code changes and new code in the unified "git diff" syntax. Example:

```diff
--- example.txt
+++ example.txt
@@ -6,3 +6,4 @@
     line content A
     line content B
+    new line added
-    original line X
+    modified line X with changes
@@ -26,4 +27,5 @@
         condition check:
-            action for condition A
+            if certain condition is met:
+                alternative action for condition A
         another condition check:
-            action for condition B
+            modified action for condition B
```

Example of a git diff creating a new file:

```diff
--- /dev/null
+++ new_file.txt
@@ -0,0 +1,3 @@
+First example line
+
+Last example line
```

RULES:
-A program will apply the diffs you generate exactly to the code, so diffs must be precise and unambiguous!
-Every diff must be fenced with triple backtick ```.
-The file names at the beginning of a diff, (lines starting with --- and +++) is the relative path to the file before and after the diff.
-LINES TO BE REMOVED (starting with single -) AND LINES TO BE RETAIN (no starting symbol) HAVE TO REPLICATE THE DIFFED HUNK OF THE CODE EXACTLY LINE BY LINE. KEEP THE NUMBER OF RETAIN LINES SMALL IF POSSIBLE.
-EACH LINE IN THE SOURCE FILES STARTS WITH A LINE NUMBER, WHICH IS NOT PART OF THE SOURCE CODE. NEVER TRANSFER THESE LINE NUMBERS TO THE DIFF HUNKS.
-AVOID STARTING A HUNK WITH AN EMPTY LINE.
-ENSURE ALL CHANGES ARE PROVIDED IN A SINGLE DIFF CHUNK PER FILE TO PREVENT MULTIPLE DIFFS ON THE SAME FILE.


As far as compatible with the user request, start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

```
File: app/__init__.py
1 from flask import Flask
2 from flask import session
3 import os
4 from dotenv import load_dotenv
5 
6 
7 def create_app():
8     load_dotenv()
9     app = Flask(__name__)
10     app.secret_key = os.getenv("FLASK_SECRET_KEY", "fallback-key-for-dev")
11     # Set upload folder and allowed extensions
12     app.config["UPLOAD_FOLDER"] = "./uploads"
13     app.config["ALLOWED_EXTENSIONS"] = {"xlsx", "xls"}
14     app.config["BEARER_ACCESS_TOKEN"] = os.environ.get(
15         "BEARER_ACCESS_TOKEN", "default_secret_key"
16     )
17     # app.config["ENV"] = os.environ.get("FLASK_ENV", "production")
18 
19     with app.app_context():
20         # Import and register blueprints
21         from .routes import main
22         from .auth import auth
23 
24         app.register_blueprint(main)
25         app.register_blueprint(auth)
26 
27     return app
28 

File: app/app.py
1 

File: app/auth.py
1 from flask import Blueprint, request, redirect, url_for, render_template, session, flash
2 from functools import wraps
3 import os
4 import json
5 from dotenv import load_dotenv
6 
7 
8 load_dotenv()
9 
10 auth = Blueprint("auth", __name__)
11 
12 # Hardcoded credentials
13 credentials = json.loads(os.getenv("GANTT_CREDENTIALS"))
14 USERNAME = credentials["username"]
15 PASSWORD = credentials["password"]
16 
17 
18 @auth.route("/login", methods=["GET", "POST"])
19 def login():
20     if request.method == "POST":
21     # def login(self):
22     #     """Handle user login."""
23     # def login(self):
24     #     """Handle user login."""
25     # def login(self):
26     """Handle user login."""
27     username = request.form.get("username")
28     password = request.form.get("password")
29 
30     if username == USERNAME and password == PASSWORD:
31         session["user"] = username
32         return redirect(url_for("main.index"))
33     else:
34         flash("Invalid username or password", "error")
35         return redirect(url_for("auth.login"))
36 
37     return render_template("login.html")
38 
39 
40 @auth.route("/logout")
41 def logout():
42     session.pop("user", None)
43     return redirect(url_for("auth.login"))
44 
45 
46 def login_required(f):
47     """Decorator to protect routes that require login."""
48 
49     @wraps(f)
50     def decorated_function(*args, **kwargs):
51         if "user" not in session:
52             return redirect(
53                 url_for("auth.login")
54             )  # Redirect to the login page if not logged in
55         return f(*args, **kwargs)
56 
57     return decorated_function
58 

File: app/continuous_gantt.py
1 import pandas as pd
2 import plotly.express as pex
3 import matplotlib.pyplot as plt
4 from openpyxl import load_workbook
5 from datetime import datetime
6 from matplotlib.pyplot import cm
7 import numpy as np
8 import os
9 from io import BytesIO
10 import logging
11 import textwrap
12 import json
13 import matplotlib.patches as mpatches
14 
15 from flask import Flask, request, jsonify, current_app
16 
17 
18 class ContinuousGantt:
19     """Class to generate Gantt charts."""
20 
21     def wrap_text(self, text, width=20):
22         """Wraps the text to a specified width."""
23         return "\n".join(textwrap.wrap(text, width=width))
24 
25     # projects_df = pd.DataFrame.from_dict(jira_json["data"], orient="index")
26     # with pd.option_context("display.max_columns", None):
27     def __init__(self, jira_data):
28         self.jira_data = jira_data
29 
30     def generate(self):
31         jira_json = self.jira_data
32         # print(projects_df)
33         # projects_df = jira_json.copy(0)
34         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("float")
35         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("Int64")
36         projects_df = jira_json.copy()
37         projects_df = projects_df.reset_index()
38         if projects_df.loc[0, "Parent Project"] != "":
39             projects_df["level_of_effort"] = 1
40 
41         elif (
42             projects_df["level_of_effort"].isnull().all()
43             and projects_df["Parent Project"].isnull().all()
44         ):
45             projects_df["level_of_effort"] = 2
46 
47         projects_df["level_of_effort"] = projects_df["level_of_effort"].astype("Int64")
48         projects_df["stack"] = 0
49         # print(projects_df)
50         projects_df = projects_df.sort_values(
51             ["Start date", "Due date", "level_of_effort"]
52         )
53         projects_df = projects_df.rename(
54             columns={"Start date": "start_date", "Due date": "end_date"}
55         )
56         pd.set_option("display.max_columns", None)
57         pd.options.display.max_colwidth = 200
58 
59         projects_df = projects_df.dropna(subset=["start_date", "end_date"])
60         projects_df["start_date"] = projects_df["start_date"].apply(
61             lambda x: x.replace(" 00:00:00", "")
62         )
63         projects_df["end_date"] = projects_df["end_date"].apply(
64             lambda x: x.replace(" 00:00:00", "")
65         )
66 
67         min_start_date = (
68             projects_df["start_date"]
69             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
70             .min()
71         )
72 
73         max_end_date = (
74             projects_df["end_date"]
75             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
76             .max()
77         )
78 
79         delta = max_end_date - min_start_date
80         length_of_matrix = delta
81 
82         delta = int(delta.total_seconds() / 60 / 60 / 24)
83         height_of_matrix = int(projects_df["level_of_effort"].sum())
84         if height_of_matrix < 7:
85             height_of_matrix = 7
86         rows, cols = (delta, height_of_matrix)
87         arr = [[0] * cols] * rows
88 
89         date_range = pd.date_range(min_start_date, max_end_date)
90 
91         range_list = list(reversed(list(range(0, height_of_matrix))))
92 
93         for z in range(0, len(range_list)):
94             range_list[z] = str(range_list[z])
95 
96         projects_df = projects_df.sort_values(
97             ["start_date", "end_date", "level_of_effort"],
98             ascending=[True, False, True],  # Specify the sorting order for each column
99         )
100         master_plotting_df = pd.DataFrame(
101             data=np.zeros((height_of_matrix, len(date_range)), dtype=int),
102             index=range(height_of_matrix),
103             columns=date_range,
104         )
105 
106         master_plotting_df = master_plotting_df.applymap(lambda x: 0)
107 
108         project_plotting_df = master_plotting_df.copy()
109 
110         # Assign stack levels avoiding overlap
111         for i, row in projects_df.iterrows():
112             start = row["start_date"]
113             end = row["end_date"]
114             effort = int(row["level_of_effort"])
115             date_slice = pd.date_range(start, end)
116 
117             for y in range(height_of_matrix - effort + 1):
118                 row_slice = list(
119                     range(y, y + effort)
120                 )  # keep as integers to match index
121                 try:
122                     slice_df = master_plotting_df.loc[row_slice, date_slice]
123                 except KeyError as e:
124                     logging.error(f"KeyError accessing plotting matrix at row {y}: {e}")
125                     continue
126 
127                 if (slice_df != 0).any().any():
128                     continue  # overlap, try next level
129                 else:
130                     # No conflict – assign and mark
131                     projects_df.at[i, "stack"] = y
132                     master_plotting_df.loc[row_slice, date_slice] = 1
133                     break
134 
135         new_max_height_df = projects_df.copy()
136         new_max_height = projects_df["stack"].max()
137         new_max_height_df = projects_df[projects_df["stack"] == new_max_height]
138         new_max_height_plus_level_of_effort = (
139             int(new_max_height_df["level_of_effort"].max()) + new_max_height
140         )
141 
142         df = projects_df.copy()
143         df = df.reset_index()
144         if df.loc[0, "Parent Project"] != "":
145             unique_parents = df["Parent Project"].unique()
146             parent_color_map = {
147                 parent: cm.rainbow(i / len(unique_parents))
148                 for i, parent in enumerate(unique_parents)
149             }
150             fig, gnt = plt.subplots(figsize=(12, 6))
151 
152             # array = np.linspace(0, 1, len(df))
153             # np.random.shuffle(array)
154 
155             # color = iter(cm.rainbow(array))
156 
157             # df = df.reset_index()
158 
159             for l in range(0, len(df)):
160                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
161                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
162                 status = df.loc[l, "Status"]
163                 parent_project = df.loc[l, "Parent Project"]
164                 parent_color = parent_color_map[parent_project]
165 
166                 if status == "Completed":
167                     color_value = parent_color
168                     edgecolor = parent_color
169                     hatch = ""
170                 elif status == "In Progress":
171                     color_value = "white"
172                     edgecolor = parent_color
173                     hatch = "--"
174 
175                 elif status == "Not Started":
176                     color_value = "white"
177                     edgecolor = parent_color
178                     hatch = ""
179                 else:
180                     color_value = "black"
181                     edgecolor = "black"
182                     hatch = "--"
183                 # Use the wrap_text function to wrap the Title field for the label
184                 gnt.broken_barh(
185                     [
186                         (
187                             pd.to_datetime(start),
188                             pd.to_datetime(finish) - pd.to_datetime(start),
189                         )
190                     ],
191                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
192                     color=color_value,
193                     edgecolor=edgecolor,
194                     hatch=hatch,
195                     linewidth=3,
196                     label=self.wrap_text(df.loc[l, "Title"]),
197                 )
198                 # gnt.broken_barh(
199                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
200                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
201                 #     color=next(color),
202                 #     label=df.loc[l, "Title"],
203                 # )
204 
205                 data = [
206                     (
207                         pd.to_datetime(start),
208                         pd.to_datetime(finish) - pd.to_datetime(start),
209                     )
210                 ]
211 
212                 title_number_map = {
213                     title: str(i + 1) for i, title in enumerate(df["Title"].unique())
214                 }
215                 title_number = title_number_map[df.loc[l, "Title"]]
216                 for x1, x2 in data:
217                     gnt.text(
218                         x=x1 + x2 / 2,
219                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
220                         - int(df.loc[l, "level_of_effort"]) / 2,
221                         s=title_number,
222                         ha="center",
223                         va="center",
224                         color="blue",
225                         fontsize=6,
226                     )
227             gnt.set_xlabel("Date")
228             gnt.set_ylabel(
229                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
230             )
231 
232             parent_legend_handles = [
233                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
234                 for parent, color in parent_color_map.items()
235             ]
236             parent_legend_handles = [
237                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
238                 for parent, color in parent_color_map.items()
239             ]
240             legend2 = gnt.legend(
241                 handles=parent_legend_handles,
242                 loc="lower left",
243                 bbox_to_anchor=(0.0, 0.0),
244                 title="Parent Projects",
245                 prop={"size": 6},
246             )
247             gnt.add_artist(legend2)
248 
249             # Title-number legend
250             title_legend_handles = [
251                 mpatches.Patch(
252                     color="white", label=f"{num}: {wrap_text(title, width=40)}"
253                 )
254                 for title, num in title_number_map.items()
255             ]
256             legend1 = gnt.legend(
257                 handles=title_legend_handles,
258                 loc="upper left",
259                 bbox_to_anchor=(1.02, 1.0),
260                 title="Project Titles",
261                 frameon=False,
262                 prop={"size": 6},
263             )
264             gnt.add_artist(legend1)
265             # Shrink axis tick and label font sizes
266             gnt.tick_params(axis="both", which="major", labelsize=6)
267             gnt.xaxis.label.set_size(6)
268             gnt.yaxis.label.set_size(6)
269             # top_value_benchmark = 0.710 / 10
270             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
271 
272             plt.subplots_adjust(left=0.1, right=0.85, bottom=0.15, top=0.9)
273             # plt.xticks(rotation=45)
274             # plt.show(block=True)
275             # Generate the plot
276             img = BytesIO()
277             plt.savefig(img, format="png", dpi=100)
278 
279             img.seek(0)
280 
281             # (img, flush=True)
282             return img
283 
284         else:
285             fig, gnt = plt.subplots(figsize=(12, 6))  # half the height
286 
287             array = np.linspace(0, 1, len(df))
288             np.random.shuffle(array)
289 
290             color = iter(cm.rainbow(array))
291 
292             # df = df.reset_index()
293 
294             for l in range(0, len(df)):
295                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
296                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
297                 status = df.loc[l, "Status"]
298                 parent_project = df.loc[l, "Parent Project"]
299                 next_color = next(color)
300 
301                 if status == "Completed":
302                     color_value = next_color
303                     edgecolor = next_color
304                     hatch = ""
305                 elif status == "In Progress":
306                     color_value = "white"
307                     edgecolor = next_color
308                     hatch = "--"
309 
310                 elif status == "Not Started":
311                     color_value = "white"
312                     edgecolor = next_color
313                     hatch = ""
314                 else:
315                     color_value = "black"
316                     edgecolor = "black"
317                     hatch = "--"
318                 # Use the wrap_text function to wrap the Title field for the label
319                 gnt.broken_barh(
320                     [
321                         (
322                             pd.to_datetime(start),
323                             pd.to_datetime(finish) - pd.to_datetime(start),
324                         )
325                     ],
326                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
327                     color=color_value,
328                     edgecolor=edgecolor,
329                     hatch=hatch,
330                     linewidth=3,
331                     label=wrap_text(df.loc[l, "Title"]),
332                 )
333                 # gnt.broken_barh(
334                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
335                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
336                 #     color=next(color),
337                 #     label=df.loc[l, "Title"],
338                 # )
339 
340                 data = [
341                     (
342                         pd.to_datetime(start),
343                         pd.to_datetime(finish) - pd.to_datetime(start),
344                     )
345                 ]
346 
347                 for x1, x2 in data:
348                     gnt.text(
349                         x=x1 + x2 / 2,
350                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
351                         - int(df.loc[l, "level_of_effort"]) / 2,
352                         s=wrap_text(df.loc[l, "Title"]),
353                         ha="center",
354                         va="center",
355                         color="blue",
356                         fontsize=6,
357                     )
358             gnt.set_xlabel("Date")
359             gnt.set_ylabel(
360                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
361             )
362 
363             # fig.legend(loc="upper left")
364 
365             # top_value_benchmark = 0.710 / 10
366             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
367 
368             plt.subplots_adjust(left=0.1, right=0.9, bottom=0.2, top=0.9)
369             # plt.xticks(rotation=45)
370             # plt.show(block=True)
371             # Generate the plot
372             img = BytesIO()
373             plt.savefig(img, format="png", dpi=100)
374 
375             img.seek(0)
376 
377             # (img, flush=True)
378             return img
379         # plot_url = base64.b64encode(img.getvalue()).decode("utf8")
380 
381         # Use send_file to return the image for download
382         # return send_file(img, mimetype='image/png', as_attachment=True, download_name='chart.png')
383         # Create static/images directory if it doesn't exist
384         # os.makedirs('static/images', exist_ok=True)
385 
386         # Save the file
387         # plt.savefig('static/images/chart.png')
388 

File: app/ics.py
1 

File: app/jira_api.py
1 from flask import Flask, request, jsonify, current_app
2 import os
3 import requests
4 import re
5 import pandas as pd
6 import numpy as np
7 from dotenv import load_dotenv
8 import os
9 import urllib
10 import urllib
11 
12 
13 # def fetch_API(label, assignee, level):
14 class JiraAPI:
15     """Class to interact with JIRA API."""
16 
17     def __init__(self, label, assignee, level):
18         self.label = label
19         self.assignee = assignee
20         self.level = level
21         self.url = f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'%20AND%20type='Initiative'%20AND%20labels={label}%20AND%20assignee%20IN%20%28%22{assignee}%22%29"
22         self.JIRA_URL = (
23             f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'"
24         )
25         self.BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
26         self.headers = {
27             "Content": "application/json",
28             "Authorization": "Basic " + self.BEARER_ACCESS_TOKEN,
29         }
30 
31     BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
32 
33     def fetch_data(self):
34         """Fetch data from JIRA API."""
35         url = self.url
36         headers = self.headers
37         level = self.level
38 
39         end = "&maxResults=100"
40 
41         # Retrieve the environment variable and set it to the variable `bearer_access_token`
42         bearer_access_token = BEARER_ACCESS_TOKEN
43 
44         # Check if the environment variable is missing
45         if not bearer_access_token:
46             raise ValueError("Environment variable 'BEARER_ACCESS_TOKEN' is not set.")
47 
48         headers = {
49             "Content": "application/json",
50             "Authorization": "Basic " + bearer_access_token,
51         }
52 
53         print(url + "&maxResults=100")
54         # Make the GET request with encoded parameters
55         response = requests.get(url + "&maxResults=100", headers=headers)
56 
57         if response.status_code in [200, 201, 202, 203, 204]:
58             try:
59                 issues = response.json()["issues"]
60             except (KeyError, json.JSONDecodeError) as e:
61                 return jsonify({"message": "Error parsing JIRA response"}), 500
62             # Create DataFrame with additional column for Assignee
63             df = pd.DataFrame(
64                 columns=[
65                     "Title",
66                     "level_of_effort",
67                     "Start date",
68                     "Due date",
69                     "Assignee",
70                     "Status",
71                     "Parent Project",
72                 ]
73             )
74             issues = response.json()["issues"]
75             rows = []
76 
77             for issue in issues:
78                 status = issue["fields"]["status"]["name"]
79                 title = issue["fields"]["summary"]
80                 key = issue["key"]
81 
82                 try:
83                     level_of_effort = (
84                         issue["fields"].get("customfield_10338", {}).get("value", None)
85                     )
86 
87                     print(level_of_effort)
88 
89                     if level_of_effort == "Low":
90                         level_of_effort = 1
91 
92                     elif level_of_effort == "Medium":
93                         level_of_effort = 2
94 
95                     elif level_of_effort == "High":
96                         level_of_effort = 3
97                     else:
98                         level_of_effort = 1
99 
100                 except:
101                     level_of_effort = 2
102                 start_date = issue["fields"].get("customfield_10022", None)
103                 due_date = issue["fields"].get("customfield_10023", None)
104 
105                 if start_date == None:
106                     start_date = issue["fields"].get("customfield_10015", None)
107 
108                 if due_date == None:
109                     due_date = issue["fields"].get("duedate", None)
110 
111                 # Get the assignee's display name if present
112                 assignee = (
113                     issue["fields"].get("assignee", {}).get("displayName", "Unassigned")
114                 )
115 
116                 if level == "subtasks":
117                     project_title = title
118                     child_issues = []
119 
120                     # Use "issueLinkType" if there's a link relationship
121                     child_query = f'parent = "{key}"'
122 
123                     # Alternative: If Initiatives are parents in JIRA
124                     # child_query = f'parent={key}'
125 
126                     child_response = requests.get(
127                         f"{JIRA_URL}%20AND%20{child_query}&maxResults=100",
128                         headers=headers,
129                     ).json()
130 
131                     # print(child_response)
132                     for child_issue in child_response.get("issues", []):
133                         child_issues.append(child_issue)
134 
135                     # print(child_issues)
136                     # Print Child Issues
137                     for child_issue in child_issues:
138                         # empty out values from outer scope
139                         title = ""
140                         status = ""
141                         level_of_effort = ""
142                         start_date = ""
143                         due_date = ""
144 
145                         title = child_issue["fields"]["summary"]
146                         status = child_issue["fields"]["status"]["name"]
147 
148                         try:
149                             level_of_effort = (
150                                 child_issue["fields"]
151                                 .get("customfield_10338", {})
152                                 .get("value", None)
153                             )
154 
155                             if level_of_effort == "Low":
156                                 level_of_effort = 1
157 
158                             elif level_of_effort == "Medium":
159                                 level_of_effort = 2
160 
161                             elif level_of_effort == "High":
162                                 level_of_effort = 3
163                             else:
164                                 level_of_effort = 1
165 
166                         except:
167                             level_of_effort = 2
168 
169                         start_date = child_issue["fields"].get(
170                             "customfield_10022", None
171                         )
172                         due_date = child_issue["fields"].get("customfield_10023", None)
173 
174                         if start_date == None:
175                             start_date = child_issue["fields"].get(
176                                 "customfield_10015", None
177                             )
178 
179                         if due_date == None:
180                             due_date = child_issue["fields"].get("duedate", None)
181 
182                             # Append the row with the new Assignee column
183                         rows.append(
184                             [
185                                 title,
186                                 level_of_effort,
187                                 start_date,
188                                 due_date,
189                                 assignee,
190                                 status,
191                                 project_title,
192                             ]
193                         )
194 
195                 else:
196                     rows.append(
197                         [
198                             title,
199                             level_of_effort,
200                             start_date,
201                             due_date,
202                             assignee,
203                             status,
204                             "",
205                         ]
206                     )
207 
208             # Create DataFrame
209             df = pd.DataFrame(
210                 rows,
211                 columns=[
212                     "Title",
213                     "level_of_effort",
214                     "Start date",
215                     "Due date",
216                     "Assignee",
217                     "Status",
218                     "Parent Project",
219                 ],
220             )
221 
222             # print(df)
223             return jsonify({"status": "success", "data": df.to_dict(orient="index")})
224 
225         else:
226             return jsonify({"message": "JIRA lookup failure.  Check label exists"}), 400
227 

File: app/routes.py
1 from flask import Blueprint, session, render_template, request, jsonify
2 from app.continuous_gantt import ContinuousGantt
3 from app.jira_api import JiraAPI
4 from app.auth import login, login_required, logout
5 import logging
6 
7 
8 main = Blueprint("main", __name__)
9 from werkzeug.utils import secure_filename
10 from .auth import login_required
11 from flask import current_app, send_file
12 import base64
13 
14 from flask import Flask, request, jsonify
15 import os
16 from werkzeug.utils import secure_filename
17 
18 app = Flask(__name__)
19 
20 UPLOAD_FOLDER = "./uploads"
21 ALLOWED_EXTENSIONS = {"xlsx", "xls"}
22 # app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
23 
24 
25 @main.route("/", methods=["GET", "POST"])
26 @login_required
27 def index():
28     return render_template("index.html")
29 
30 
31 def allowed_file(filename):
32     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
33 
34 
35 # @main.route("/", methods=['GET', 'POST'])
36 # @login_required
37 # def index():
38 #     return render_template("index.html")
39 
40 
41 @main.route("/upload", methods=["POST"])
42 @login_required
43 def upload_file():
44     if "file" not in request.files:
45         return jsonify({"message": "No file part"}), 400
46 
47     file = request.files["file"]
48 
49     if file.filename == "":
50         return jsonify({"message": "No selected file"}), 400
51 
52     if file and allowed_file(file.filename):
53         filename = secure_filename(file.filename)
54         file.save(os.path.join(current_app.config["UPLOAD_FOLDER"], filename))
55         return jsonify({"message": "File successfully uploaded"}), 200
56 
57     return jsonify({"message": "Invalid file format"}), 400
58 
59 
60 # @main.route("/fetchAPI", methods=["GET"])
61 # @login_required
62 # def fetchAPI():
63 #     print(request.args["label"])
64 
65 #     response = fetch_API(request.args["label"], request.args["assignee"], request.args['level'])
66 
67 
68 #     return response
69 
70 
71 @main.route("/process", methods=["POST"])
72 @login_required
73 def process(self):
74     """Instantiate and invoke methods from other classes."""
75     label = request.args.get("label")
76     assignee = request.args.get("assignee")
77     level = request.args.get("level")
78 
79     # Instantiate JiraAPI and fetch data
80     jira_api = JiraAPI(label, assignee, level)
81     jira_data = jira_api.fetch_data()
82 
83     # Instantiate ContinuousGantt and generate chart
84     gantt_chart = ContinuousGantt(jira_data)
85     chart_image = gantt_chart.generate()
86 
87     return jsonify({"status": "success", "image_data": chart_image})
88 
89 
90 @app.route("/download-image")
91 def download_image():
92     # Serve the image file from the 'static/images' folder
93     return send_file(
94         "static/images/chart.png",
95         mimetype="image/png",
96         as_attachment=True,
97         download_name="chart.png",
98     )
99 
100 
101 @main.route("/generate", methods=["POST"])
102 def generate():
103     data = request.get_json()
104 
105     if not data:
106         return jsonify({"status": "error", "message": "No data provided"}), 400
107 
108     # Process the data (this part should contain your processing logic)
109     projects_df = data.get("projects_df")
110 
111     # try:
112     # Your logic here
113     # For example, generating a chart and returning the image data
114     # In this case, we will simulate the result for demo purposes
115 
116     result = generate_gantt_chart(projects_df)
117 
118     result.seek(0)
119     img_base64 = base64.b64encode(result.getvalue()).decode("utf-8")
120 
121     return jsonify({"status": "success", "image_data": img_base64})
122     # except Exception as e:
123     #    print(f"Error processing data: {e}")
124     #    return jsonify({"status": "error", "message": str(e)}), 500
125 
126 
127 # @main.route("/generate", methods=["POST"])
128 # def generate():
129 #     # Retrieve the JSON data sent in the request body
130 #     jira_json = request.get_json()  # Get JSON data from the request
131 
132 #     if jira_json is None:
133 #         return jsonify({'status': 'error', 'message': 'No data provided'}), 400
134 
135 #     else:
136 #         print(jira_json)  # Print the JSON to inspect it
137 
138 
139 #         result = generate_gantt_chart(jira_json)
140 
141 
142 #         result.seek(0)
143 #         img_base64 = base64.b64encode(result.getvalue()).decode('utf-8')
144 
145 
146 #         return jsonify({"status": "success", "image_data": img_base64})
147 #         #return send_file(result, mimetype='image/png', as_attachment=True, download_name='chart.png')
148 

File: app/templates/index.html
1 <!--<!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Gantt Chart Generator</title>
7     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
8 </head>
9 <body>
10     <h1>Gantt Chart Generator</h1>
11     <label labelfor="fileInput">Upload Excel File</label>
12     <input type="file" id="fileInput" accept=".xlsx, .xls">
13     <button id="generate-btn">Generate Gantt Chart</button>
14 
15     <script>
16         $(document).ready(function() {
17             $('#generate-btn').click(function() {
18                 $.post('/generate', function(response) {
19                     alert(response.message);
20                 });
21             });
22         });
23     </script>
24 </body>
25 </html>-->
26 
27 <!DOCTYPE html>
28 <html lang="en">
29 <head>
30     <meta charset="UTF-8">
31     <meta name="viewport" content="width=device-width, initial-scale=1.0">
32     <title>Gantt Chart Generator</title>
33     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
34 
35    
36         
37         
38         <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}"> 
39         <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
40       
41     
42 </head>
43 <body>
44     <div id="hourglass" style="display: none;">
45         <div class="spinner"></div>
46     </div>
47     <header>
48         <div class="logo">Tufts Libraries</div> 
49      </header>
50      <div class="content">
51     <h1>Gantt Chart Generator</h1>
52     <!--<div>
53             
54         <label class="label" for="download">Download sample input file:</label>
55         <a href="{{ url_for('static', filename='template.xlsx') }}">Download</a>
56     </div>-->
57         <!--<label for="label" style="width: 10%">Upload Excel File</label>-->
58         <input type="text" id="label" placeholder="Enter project year label, e.g. 'FY25'">
59         <button id="fetch-btn">Refresh Data</button>
60            <!-- New Assignee Dropdown -->
61            <label for="assignee-select">Select Assignee:</label>
62            <select id="assignee-select">
63                <option value="All">All</option>
64                <option value="Michael J. Hemment">Michael J. Hemment</option>
65                <option value="Henry Steele">Henry Steele</option>
66 
67          </select>
68          <select id="level-select">
69             <option value="initiative">Initiative</option>
70             <option value="subtasks">Child Issues of Initiatives</option>
71             
72 
73       </select>
74          <div class="form-row" style="display: none;" id="download-container">
75             <button type="button" id="download-btn">Download Result</button>
76         </div>
77          <!-- Explanation paragraph -->
78          <div id="app-description"><p>
79             This app allows you to visualize your projects for a given period of time by allowing you to stack projects that start before the end date of the previous, on the same line  </p><p>While most Gantt charts have a separate row for each project, this chart uses the y-axis, which is normally synonymous with separate projects, as continuous date ranges such that once one project ends, another can begin, on the same line if room for that project fits there. This allows you to see if you are arranging project start and end dates in the optimal way given bandwidth at given times, and adjust start and end dates in respones if that would make better use of your project time.
80             </p><p>This instance of the Gantt Chart Generator connects to a JIRA instance for which if you install this app on our own system you will need to get a bearer access token and enter into the .env file.</p>
81 
82                 <p>It looks for either project start and end dates, or target start and target end.   Since this is at a project level of granularlity, it is looking only for initiatives.</p>
83 
84                 
85 
86 <!--<p><strong>Download the template file above to see the format to upload your project file in.</strong>  This file can also be fed into the generator.</p>-->
87             </div>
88 
89             <div id="output-wrapper">
90                 <img id="output" src="" />
91             </div>
92             
93             
94     <script>
95         $(document).ready(function() {
96             $('#fetch-btn').click(function() {
97 
98     
99                 $('#hourglass').show();
100 
101    
102                 var label = document.getElementById("label").value;
103                 var assignee = document.getElementById("assignee-select").value;
104                 var level = document.getElementById("level-select").value;
105                 
106                 //alert("Selected Label: " + label + ", Selected Assignee: " + assignee);
107                 let list = [];
108                 if (assignee == "All"){
109 
110                     $('#assignee-select option').each(function() {
111                     if ($(this).val() !== 'All') {
112                         list.push(encodeURIComponent($(this).val()));// This will log each value except "All"
113                             // You can add the value to an array or perform other actions here
114                         }
115                     });
116                     
117                     assignee = `${list.join('","')}`;
118                     
119 
120                     
121                 }
122 
123                 
124 
125                 // Using relative path to avoid cross-origin fetch
126                 $.ajax({
127                     url: '/process', // Ensure this endpoint is handled by your local server
128                     type: 'POST',
129                     data: { label: label, assignee: assignee, level: level },
130                     success: function(response) {
131                         //alert(response.message);
132                         fetch('/generate', { 
133                             method: 'POST',
134                             headers: {
135                                 'Content-Type': 'application/json'
136                             },
137                             body: JSON.stringify({ projects_df: response }) // Use 'body' to send data
138                         })
139                         .then(response => response.json()) // Expecting JSON response
140                         .then(data => {
141                             if (data.status === 'success') {
142                                 $('#hourglass').hide();
143                                 $('#app-description').hide();
144                                 $('#output').attr('src', 'data:image/png;base64,' + data.image_data);
145                                 $('#output').show();
146                                 $('#download-btn').off('click').on('click', function () {
147                                 // Create a Blob from the base64 data and trigger download
148                                     const byteCharacters = atob(data.image_data);  // Decode base64 string
149                                     const byteNumbers = new Array(byteCharacters.length).fill().map((_, i) => byteCharacters.charCodeAt(i));
150                                     const byteArray = new Uint8Array(byteNumbers);
151                                     const blob = new Blob([byteArray], { type: 'image/png' });
152 
153                                     const url = window.URL.createObjectURL(blob);  // Create Blob URL
154                                     const a = document.createElement('a');  // Create <a> element for download
155                                     a.href = url;
156                                     a.download = 'gantt_chart.png';  // Set download filename
157                                     document.body.appendChild(a);
158                                     a.click();  // Simulate click to trigger download
159                                     document.body.removeChild(a);  // Clean up DOM
160                                     window.URL.revokeObjectURL(url);  //
161                                 })
162                             } else {
163                                 throw new Error('Failed to generate the chart');
164                             }
165                         })
166                         .catch(error => {
167                             alert("Error: " + error.message);
168                         });
169                     },
170                     error: function(jqXHR, textStatus, errorThrown) {
171                         alert("Failed to fetch data: " + textStatus);
172                     }
173                 });
174             });
175 
176       
177   
178 });
179 
180 
181     </script>
182 
183     <script>
184     $(document).ready(function() {
185         $('#generate-btn').click(function() {
186             fetch('/generate', {
187                 method: 'POST'
188             })
189             .then(response => {
190                 if (response.ok) {
191                     $('#output').attr('src', 'data:image/png;base64,' + response.image_data);
192                     $('#output').show();
193                     
194                     return response.blob(); // Convert the response to a Blob
195                 } else {
196                     throw new Error('Failed to generate the file');
197                 }
198             })
199             .then(blob => {
200                 // Create a temporary URL for the file
201                 const url = window.URL.createObjectURL(blob);
202                 const a = document.createElement('a');
203                 a.href = url;
204                 a.download = 'chart.png';  // Set the file name for download
205                 document.body.appendChild(a); // Append <a> to body
206                 
207                 a.click(); // Trigger the download
208                 a.remove(); // Remove <a> after download
209                 window.URL.revokeObjectURL(url); // Clean up the URL object
210             })
211             .catch(error => {
212                 alert("Error: " + error.message);
213             });
214         });
215     });
216 </script>
217 </div>
218 </body>
219 </html>
220 

File: app/templates/login.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Login</title>
7     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
8 </head>
9 <body>
10     <div class="content">
11         <h1>Login</h1>
12         {% with messages = get_flashed_messages(with_categories=true) %}
13           {% if messages %}
14             <ul class="flashes">
15             {% for category, message in messages %}
16               <li class="{{ category }}">{{ message }}</li>
17             {% endfor %}
18             </ul>
19           {% endif %}
20         {% endwith %}
21         <form method="POST">
22             <label for="username">Username:</label>
23             <input type="text" name="username" required>
24             <label for="password">Password:</label>
25             <input type="password" name="password" required>
26             <button type="submit">Login</button>
27         </form>
28     </div>
29 </body>
30 </html>

File: wsgi.py
1 from app import create_app
2 
3 app = create_app()
4 
5 if __name__ == "__main__":
6     app.run(host="0.0.0.0", port=5000)
7 

```

Request: why is this saying missing required argument "self" in auth line 52

================================== Ai Message ==================================

The error message "missing required argument 'self'" typically occurs when a method that is supposed to be an instance method of a class is called without an instance. In Python, instance methods must have `self` as their first parameter, which refers to the instance of the class.

In the provided code, the error is likely due to the `login_required` decorator being applied to a function that is not part of a class, but the decorator is expecting it to be a method of a class. The `login_required` decorator is defined in `app/auth.py` and is applied to the `index` and `upload_file` functions in `app/routes.py`.

To resolve this issue, we need to ensure that the `login_required` decorator is correctly applied to functions that are not methods of a class. We can do this by modifying the `login_required` decorator to work with functions that are not part of a class.

Let's make the necessary changes:

1. Modify the `login_required` decorator in `app/auth.py` to ensure it works with functions that are not part of a class.
2. Ensure that the `index` and `upload_file` functions in `app/routes.py` are correctly decorated.

Here's the updated code:

```diff
--- app/auth.py
+++ app/auth.py
@@ -46,13 +46,13 @@
 
 def login_required(f):
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
```

The `login_required` decorator is already correctly implemented to work with functions that are not part of a class. The issue might have been a misunderstanding of how the decorator is applied.

Now, let's ensure that the `index` and `upload_file` functions in `app/routes.py` are correctly decorated:

```diff
--- app/routes.py
+++ app/routes.py
@@ -25,7 +25,7 @@
 
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
 
 def allowed_file(filename):
     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
@@ -41,7 +41,7 @@
 
 @main.route("/upload", methods=["POST"])
 @login_required
 def upload_file():
     if "file" not in request.files:
         return jsonify({"message": "No file part"}), 400
 
     file = request.files["file"]
```

The `login_required` decorator is correctly applied to both the `index` and `upload_file` functions. If you are still encountering the error, ensure that the `login_required` decorator is not being used in a context where it expects a class method.

This concludes a fully working implementation.

================================ Human Message =================================

Some previously produced diffs were not on the requested format, or the code part was not found in the code. Details:
In Hunk:@@ -6,13 +46,13 @@
 
 
 load_dotenv()
 
 auth = Blueprint("auth", __name__)
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
, there was at least one mismatch.
In Hunk:@@ -6,7 +25,7 @@
 
 
 main = Blueprint("main", __name__)
 from werkzeug.utils import secure_filename
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
 
 def allowed_file(filename):
     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
, there was at least one mismatch.
 Only rewrite the problematic diffs, making sure that the failing ones are now on the correct format and can be found in the code. Make sure to not repeat past mistakes. 


================================== Ai Message ==================================

Let's address the issues with the previous diffs and ensure they are correctly formatted and match the existing code.

### Corrected Diff for `app/auth.py`

The previous diff for `app/auth.py` was incorrectly formatted. Let's correct it:

```diff
--- app/auth.py
+++ app/auth.py
@@ -46,13 +46,13 @@
 
 def login_required(f):
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
```

### Corrected Diff for `app/routes.py`

The previous diff for `app/routes.py` was incorrectly formatted. Let's correct it:

```diff
--- app/routes.py
+++ app/routes.py
@@ -8,7 +8,7 @@
 from werkzeug.utils import secure_filename
 from .auth import login_required
 from flask import current_app, send_file
 import base64
 
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
```

These diffs should now be correctly formatted and match the existing code. If there are any further issues, please let me know.

2025-08-19T18:08:11.113464
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
Make changes to existing code and implement new code in the unified git diff syntax. When implementing new code, First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Output requested code changes and new code in the unified "git diff" syntax. Example:

```diff
--- example.txt
+++ example.txt
@@ -6,3 +6,4 @@
     line content A
     line content B
+    new line added
-    original line X
+    modified line X with changes
@@ -26,4 +27,5 @@
         condition check:
-            action for condition A
+            if certain condition is met:
+                alternative action for condition A
         another condition check:
-            action for condition B
+            modified action for condition B
```

Example of a git diff creating a new file:

```diff
--- /dev/null
+++ new_file.txt
@@ -0,0 +1,3 @@
+First example line
+
+Last example line
```

RULES:
-A program will apply the diffs you generate exactly to the code, so diffs must be precise and unambiguous!
-Every diff must be fenced with triple backtick ```.
-The file names at the beginning of a diff, (lines starting with --- and +++) is the relative path to the file before and after the diff.
-LINES TO BE REMOVED (starting with single -) AND LINES TO BE RETAIN (no starting symbol) HAVE TO REPLICATE THE DIFFED HUNK OF THE CODE EXACTLY LINE BY LINE. KEEP THE NUMBER OF RETAIN LINES SMALL IF POSSIBLE.
-EACH LINE IN THE SOURCE FILES STARTS WITH A LINE NUMBER, WHICH IS NOT PART OF THE SOURCE CODE. NEVER TRANSFER THESE LINE NUMBERS TO THE DIFF HUNKS.
-AVOID STARTING A HUNK WITH AN EMPTY LINE.
-ENSURE ALL CHANGES ARE PROVIDED IN A SINGLE DIFF CHUNK PER FILE TO PREVENT MULTIPLE DIFFS ON THE SAME FILE.


As far as compatible with the user request, start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

```
File: app/__init__.py
1 from flask import Flask
2 from flask import session
3 import os
4 from dotenv import load_dotenv
5 
6 
7 def create_app():
8     load_dotenv()
9     app = Flask(__name__)
10     app.secret_key = os.getenv("FLASK_SECRET_KEY", "fallback-key-for-dev")
11     # Set upload folder and allowed extensions
12     app.config["UPLOAD_FOLDER"] = "./uploads"
13     app.config["ALLOWED_EXTENSIONS"] = {"xlsx", "xls"}
14     app.config["BEARER_ACCESS_TOKEN"] = os.environ.get(
15         "BEARER_ACCESS_TOKEN", "default_secret_key"
16     )
17     # app.config["ENV"] = os.environ.get("FLASK_ENV", "production")
18 
19     with app.app_context():
20         # Import and register blueprints
21         from .routes import main
22         from .auth import auth
23 
24         app.register_blueprint(main)
25         app.register_blueprint(auth)
26 
27     return app
28 

File: app/app.py
1 

File: app/auth.py
1 from flask import Blueprint, request, redirect, url_for, render_template, session, flash
2 from functools import wraps
3 import os
4 import json
5 from dotenv import load_dotenv
6 
7 
8 load_dotenv()
9 
10 auth = Blueprint("auth", __name__)
11 
12 # Hardcoded credentials
13 credentials = json.loads(os.getenv("GANTT_CREDENTIALS"))
14 USERNAME = credentials["username"]
15 PASSWORD = credentials["password"]
16 
17 
18 @auth.route("/login", methods=["GET", "POST"])
19 def login():
20     if request.method == "POST":
21     # def login(self):
22     #     """Handle user login."""
23     # def login(self):
24     #     """Handle user login."""
25     # def login(self):
26     """Handle user login."""
27     username = request.form.get("username")
28     password = request.form.get("password")
29 
30     if username == USERNAME and password == PASSWORD:
31         session["user"] = username
32         return redirect(url_for("main.index"))
33     else:
34         flash("Invalid username or password", "error")
35         return redirect(url_for("auth.login"))
36 
37     return render_template("login.html")
38 
39 
40 @auth.route("/logout")
41 def logout():
42     session.pop("user", None)
43     return redirect(url_for("auth.login"))
44 
45 
46 def login_required(f):
47     """Decorator to protect routes that require login."""
48 
49     @wraps(f)
50     def decorated_function(*args, **kwargs):
51         if "user" not in session:
52             return redirect(
53                 url_for("auth.login")
54             )  # Redirect to the login page if not logged in
55         return f(*args, **kwargs)
56 
57     return decorated_function
58 

File: app/continuous_gantt.py
1 import pandas as pd
2 import plotly.express as pex
3 import matplotlib.pyplot as plt
4 from openpyxl import load_workbook
5 from datetime import datetime
6 from matplotlib.pyplot import cm
7 import numpy as np
8 import os
9 from io import BytesIO
10 import logging
11 import textwrap
12 import json
13 import matplotlib.patches as mpatches
14 
15 from flask import Flask, request, jsonify, current_app
16 
17 
18 class ContinuousGantt:
19     """Class to generate Gantt charts."""
20 
21     def wrap_text(self, text, width=20):
22         """Wraps the text to a specified width."""
23         return "\n".join(textwrap.wrap(text, width=width))
24 
25     # projects_df = pd.DataFrame.from_dict(jira_json["data"], orient="index")
26     # with pd.option_context("display.max_columns", None):
27     def __init__(self, jira_data):
28         self.jira_data = jira_data
29 
30     def generate(self):
31         jira_json = self.jira_data
32         # print(projects_df)
33         # projects_df = jira_json.copy(0)
34         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("float")
35         # projects_df['level_of_effort'] = projects_df['level_of_effort'].astype("Int64")
36         projects_df = jira_json.copy()
37         projects_df = projects_df.reset_index()
38         if projects_df.loc[0, "Parent Project"] != "":
39             projects_df["level_of_effort"] = 1
40 
41         elif (
42             projects_df["level_of_effort"].isnull().all()
43             and projects_df["Parent Project"].isnull().all()
44         ):
45             projects_df["level_of_effort"] = 2
46 
47         projects_df["level_of_effort"] = projects_df["level_of_effort"].astype("Int64")
48         projects_df["stack"] = 0
49         # print(projects_df)
50         projects_df = projects_df.sort_values(
51             ["Start date", "Due date", "level_of_effort"]
52         )
53         projects_df = projects_df.rename(
54             columns={"Start date": "start_date", "Due date": "end_date"}
55         )
56         pd.set_option("display.max_columns", None)
57         pd.options.display.max_colwidth = 200
58 
59         projects_df = projects_df.dropna(subset=["start_date", "end_date"])
60         projects_df["start_date"] = projects_df["start_date"].apply(
61             lambda x: x.replace(" 00:00:00", "")
62         )
63         projects_df["end_date"] = projects_df["end_date"].apply(
64             lambda x: x.replace(" 00:00:00", "")
65         )
66 
67         min_start_date = (
68             projects_df["start_date"]
69             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
70             .min()
71         )
72 
73         max_end_date = (
74             projects_df["end_date"]
75             .apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
76             .max()
77         )
78 
79         delta = max_end_date - min_start_date
80         length_of_matrix = delta
81 
82         delta = int(delta.total_seconds() / 60 / 60 / 24)
83         height_of_matrix = int(projects_df["level_of_effort"].sum())
84         if height_of_matrix < 7:
85             height_of_matrix = 7
86         rows, cols = (delta, height_of_matrix)
87         arr = [[0] * cols] * rows
88 
89         date_range = pd.date_range(min_start_date, max_end_date)
90 
91         range_list = list(reversed(list(range(0, height_of_matrix))))
92 
93         for z in range(0, len(range_list)):
94             range_list[z] = str(range_list[z])
95 
96         projects_df = projects_df.sort_values(
97             ["start_date", "end_date", "level_of_effort"],
98             ascending=[True, False, True],  # Specify the sorting order for each column
99         )
100         master_plotting_df = pd.DataFrame(
101             data=np.zeros((height_of_matrix, len(date_range)), dtype=int),
102             index=range(height_of_matrix),
103             columns=date_range,
104         )
105 
106         master_plotting_df = master_plotting_df.applymap(lambda x: 0)
107 
108         project_plotting_df = master_plotting_df.copy()
109 
110         # Assign stack levels avoiding overlap
111         for i, row in projects_df.iterrows():
112             start = row["start_date"]
113             end = row["end_date"]
114             effort = int(row["level_of_effort"])
115             date_slice = pd.date_range(start, end)
116 
117             for y in range(height_of_matrix - effort + 1):
118                 row_slice = list(
119                     range(y, y + effort)
120                 )  # keep as integers to match index
121                 try:
122                     slice_df = master_plotting_df.loc[row_slice, date_slice]
123                 except KeyError as e:
124                     logging.error(f"KeyError accessing plotting matrix at row {y}: {e}")
125                     continue
126 
127                 if (slice_df != 0).any().any():
128                     continue  # overlap, try next level
129                 else:
130                     # No conflict – assign and mark
131                     projects_df.at[i, "stack"] = y
132                     master_plotting_df.loc[row_slice, date_slice] = 1
133                     break
134 
135         new_max_height_df = projects_df.copy()
136         new_max_height = projects_df["stack"].max()
137         new_max_height_df = projects_df[projects_df["stack"] == new_max_height]
138         new_max_height_plus_level_of_effort = (
139             int(new_max_height_df["level_of_effort"].max()) + new_max_height
140         )
141 
142         df = projects_df.copy()
143         df = df.reset_index()
144         if df.loc[0, "Parent Project"] != "":
145             unique_parents = df["Parent Project"].unique()
146             parent_color_map = {
147                 parent: cm.rainbow(i / len(unique_parents))
148                 for i, parent in enumerate(unique_parents)
149             }
150             fig, gnt = plt.subplots(figsize=(12, 6))
151 
152             # array = np.linspace(0, 1, len(df))
153             # np.random.shuffle(array)
154 
155             # color = iter(cm.rainbow(array))
156 
157             # df = df.reset_index()
158 
159             for l in range(0, len(df)):
160                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
161                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
162                 status = df.loc[l, "Status"]
163                 parent_project = df.loc[l, "Parent Project"]
164                 parent_color = parent_color_map[parent_project]
165 
166                 if status == "Completed":
167                     color_value = parent_color
168                     edgecolor = parent_color
169                     hatch = ""
170                 elif status == "In Progress":
171                     color_value = "white"
172                     edgecolor = parent_color
173                     hatch = "--"
174 
175                 elif status == "Not Started":
176                     color_value = "white"
177                     edgecolor = parent_color
178                     hatch = ""
179                 else:
180                     color_value = "black"
181                     edgecolor = "black"
182                     hatch = "--"
183                 # Use the wrap_text function to wrap the Title field for the label
184                 gnt.broken_barh(
185                     [
186                         (
187                             pd.to_datetime(start),
188                             pd.to_datetime(finish) - pd.to_datetime(start),
189                         )
190                     ],
191                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
192                     color=color_value,
193                     edgecolor=edgecolor,
194                     hatch=hatch,
195                     linewidth=3,
196                     label=self.wrap_text(df.loc[l, "Title"]),
197                 )
198                 # gnt.broken_barh(
199                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
200                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
201                 #     color=next(color),
202                 #     label=df.loc[l, "Title"],
203                 # )
204 
205                 data = [
206                     (
207                         pd.to_datetime(start),
208                         pd.to_datetime(finish) - pd.to_datetime(start),
209                     )
210                 ]
211 
212                 title_number_map = {
213                     title: str(i + 1) for i, title in enumerate(df["Title"].unique())
214                 }
215                 title_number = title_number_map[df.loc[l, "Title"]]
216                 for x1, x2 in data:
217                     gnt.text(
218                         x=x1 + x2 / 2,
219                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
220                         - int(df.loc[l, "level_of_effort"]) / 2,
221                         s=title_number,
222                         ha="center",
223                         va="center",
224                         color="blue",
225                         fontsize=6,
226                     )
227             gnt.set_xlabel("Date")
228             gnt.set_ylabel(
229                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
230             )
231 
232             parent_legend_handles = [
233                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
234                 for parent, color in parent_color_map.items()
235             ]
236             parent_legend_handles = [
237                 mpatches.Patch(color=color, label=wrap_text(parent, width=25))
238                 for parent, color in parent_color_map.items()
239             ]
240             legend2 = gnt.legend(
241                 handles=parent_legend_handles,
242                 loc="lower left",
243                 bbox_to_anchor=(0.0, 0.0),
244                 title="Parent Projects",
245                 prop={"size": 6},
246             )
247             gnt.add_artist(legend2)
248 
249             # Title-number legend
250             title_legend_handles = [
251                 mpatches.Patch(
252                     color="white", label=f"{num}: {wrap_text(title, width=40)}"
253                 )
254                 for title, num in title_number_map.items()
255             ]
256             legend1 = gnt.legend(
257                 handles=title_legend_handles,
258                 loc="upper left",
259                 bbox_to_anchor=(1.02, 1.0),
260                 title="Project Titles",
261                 frameon=False,
262                 prop={"size": 6},
263             )
264             gnt.add_artist(legend1)
265             # Shrink axis tick and label font sizes
266             gnt.tick_params(axis="both", which="major", labelsize=6)
267             gnt.xaxis.label.set_size(6)
268             gnt.yaxis.label.set_size(6)
269             # top_value_benchmark = 0.710 / 10
270             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
271 
272             plt.subplots_adjust(left=0.1, right=0.85, bottom=0.15, top=0.9)
273             # plt.xticks(rotation=45)
274             # plt.show(block=True)
275             # Generate the plot
276             img = BytesIO()
277             plt.savefig(img, format="png", dpi=100)
278 
279             img.seek(0)
280 
281             # (img, flush=True)
282             return img
283 
284         else:
285             fig, gnt = plt.subplots(figsize=(12, 6))  # half the height
286 
287             array = np.linspace(0, 1, len(df))
288             np.random.shuffle(array)
289 
290             color = iter(cm.rainbow(array))
291 
292             # df = df.reset_index()
293 
294             for l in range(0, len(df)):
295                 start = datetime.strptime(df.loc[l, "start_date"], "%Y-%m-%d")
296                 finish = datetime.strptime(df.loc[l, "end_date"], "%Y-%m-%d")
297                 status = df.loc[l, "Status"]
298                 parent_project = df.loc[l, "Parent Project"]
299                 next_color = next(color)
300 
301                 if status == "Completed":
302                     color_value = next_color
303                     edgecolor = next_color
304                     hatch = ""
305                 elif status == "In Progress":
306                     color_value = "white"
307                     edgecolor = next_color
308                     hatch = "--"
309 
310                 elif status == "Not Started":
311                     color_value = "white"
312                     edgecolor = next_color
313                     hatch = ""
314                 else:
315                     color_value = "black"
316                     edgecolor = "black"
317                     hatch = "--"
318                 # Use the wrap_text function to wrap the Title field for the label
319                 gnt.broken_barh(
320                     [
321                         (
322                             pd.to_datetime(start),
323                             pd.to_datetime(finish) - pd.to_datetime(start),
324                         )
325                     ],
326                     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
327                     color=color_value,
328                     edgecolor=edgecolor,
329                     hatch=hatch,
330                     linewidth=3,
331                     label=wrap_text(df.loc[l, "Title"]),
332                 )
333                 # gnt.broken_barh(
334                 #     [(pd.to_datetime(start), pd.to_datetime(finish) - pd.to_datetime(start))],
335                 #     [int(df.loc[l, "stack"]), int(df.loc[l, "level_of_effort"])],
336                 #     color=next(color),
337                 #     label=df.loc[l, "Title"],
338                 # )
339 
340                 data = [
341                     (
342                         pd.to_datetime(start),
343                         pd.to_datetime(finish) - pd.to_datetime(start),
344                     )
345                 ]
346 
347                 for x1, x2 in data:
348                     gnt.text(
349                         x=x1 + x2 / 2,
350                         y=(int(df.loc[l, "stack"]) + int(df.loc[l, "level_of_effort"]))
351                         - int(df.loc[l, "level_of_effort"]) / 2,
352                         s=wrap_text(df.loc[l, "Title"]),
353                         ha="center",
354                         va="center",
355                         color="blue",
356                         fontsize=6,
357                     )
358             gnt.set_xlabel("Date")
359             gnt.set_ylabel(
360                 "Rough Average Hours per Day\nEffort Level: Low=2, Medium=4, High= 6, Average for Project.  Most projects of any length are Low=2"
361             )
362 
363             # fig.legend(loc="upper left")
364 
365             # top_value_benchmark = 0.710 / 10
366             # top_value = top_value_benchmark * new_max_height_plus_level_of_effort
367 
368             plt.subplots_adjust(left=0.1, right=0.9, bottom=0.2, top=0.9)
369             # plt.xticks(rotation=45)
370             # plt.show(block=True)
371             # Generate the plot
372             img = BytesIO()
373             plt.savefig(img, format="png", dpi=100)
374 
375             img.seek(0)
376 
377             # (img, flush=True)
378             return img
379         # plot_url = base64.b64encode(img.getvalue()).decode("utf8")
380 
381         # Use send_file to return the image for download
382         # return send_file(img, mimetype='image/png', as_attachment=True, download_name='chart.png')
383         # Create static/images directory if it doesn't exist
384         # os.makedirs('static/images', exist_ok=True)
385 
386         # Save the file
387         # plt.savefig('static/images/chart.png')
388 

File: app/ics.py
1 

File: app/jira_api.py
1 from flask import Flask, request, jsonify, current_app
2 import os
3 import requests
4 import re
5 import pandas as pd
6 import numpy as np
7 from dotenv import load_dotenv
8 import os
9 import urllib
10 import urllib
11 
12 
13 # def fetch_API(label, assignee, level):
14 class JiraAPI:
15     """Class to interact with JIRA API."""
16 
17     def __init__(self, label, assignee, level):
18         self.label = label
19         self.assignee = assignee
20         self.level = level
21         self.url = f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'%20AND%20type='Initiative'%20AND%20labels={label}%20AND%20assignee%20IN%20%28%22{assignee}%22%29"
22         self.JIRA_URL = (
23             f"https://tuftswork.atlassian.net/rest/api/3/search?jql=project='LGP'"
24         )
25         self.BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
26         self.headers = {
27             "Content": "application/json",
28             "Authorization": "Basic " + self.BEARER_ACCESS_TOKEN,
29         }
30 
31     BEARER_ACCESS_TOKEN = os.environ.get("BEARER_ACCESS_TOKEN")
32 
33     def fetch_data(self):
34         """Fetch data from JIRA API."""
35         url = self.url
36         headers = self.headers
37         level = self.level
38 
39         end = "&maxResults=100"
40 
41         # Retrieve the environment variable and set it to the variable `bearer_access_token`
42         bearer_access_token = BEARER_ACCESS_TOKEN
43 
44         # Check if the environment variable is missing
45         if not bearer_access_token:
46             raise ValueError("Environment variable 'BEARER_ACCESS_TOKEN' is not set.")
47 
48         headers = {
49             "Content": "application/json",
50             "Authorization": "Basic " + bearer_access_token,
51         }
52 
53         print(url + "&maxResults=100")
54         # Make the GET request with encoded parameters
55         response = requests.get(url + "&maxResults=100", headers=headers)
56 
57         if response.status_code in [200, 201, 202, 203, 204]:
58             try:
59                 issues = response.json()["issues"]
60             except (KeyError, json.JSONDecodeError) as e:
61                 return jsonify({"message": "Error parsing JIRA response"}), 500
62             # Create DataFrame with additional column for Assignee
63             df = pd.DataFrame(
64                 columns=[
65                     "Title",
66                     "level_of_effort",
67                     "Start date",
68                     "Due date",
69                     "Assignee",
70                     "Status",
71                     "Parent Project",
72                 ]
73             )
74             issues = response.json()["issues"]
75             rows = []
76 
77             for issue in issues:
78                 status = issue["fields"]["status"]["name"]
79                 title = issue["fields"]["summary"]
80                 key = issue["key"]
81 
82                 try:
83                     level_of_effort = (
84                         issue["fields"].get("customfield_10338", {}).get("value", None)
85                     )
86 
87                     print(level_of_effort)
88 
89                     if level_of_effort == "Low":
90                         level_of_effort = 1
91 
92                     elif level_of_effort == "Medium":
93                         level_of_effort = 2
94 
95                     elif level_of_effort == "High":
96                         level_of_effort = 3
97                     else:
98                         level_of_effort = 1
99 
100                 except:
101                     level_of_effort = 2
102                 start_date = issue["fields"].get("customfield_10022", None)
103                 due_date = issue["fields"].get("customfield_10023", None)
104 
105                 if start_date == None:
106                     start_date = issue["fields"].get("customfield_10015", None)
107 
108                 if due_date == None:
109                     due_date = issue["fields"].get("duedate", None)
110 
111                 # Get the assignee's display name if present
112                 assignee = (
113                     issue["fields"].get("assignee", {}).get("displayName", "Unassigned")
114                 )
115 
116                 if level == "subtasks":
117                     project_title = title
118                     child_issues = []
119 
120                     # Use "issueLinkType" if there's a link relationship
121                     child_query = f'parent = "{key}"'
122 
123                     # Alternative: If Initiatives are parents in JIRA
124                     # child_query = f'parent={key}'
125 
126                     child_response = requests.get(
127                         f"{JIRA_URL}%20AND%20{child_query}&maxResults=100",
128                         headers=headers,
129                     ).json()
130 
131                     # print(child_response)
132                     for child_issue in child_response.get("issues", []):
133                         child_issues.append(child_issue)
134 
135                     # print(child_issues)
136                     # Print Child Issues
137                     for child_issue in child_issues:
138                         # empty out values from outer scope
139                         title = ""
140                         status = ""
141                         level_of_effort = ""
142                         start_date = ""
143                         due_date = ""
144 
145                         title = child_issue["fields"]["summary"]
146                         status = child_issue["fields"]["status"]["name"]
147 
148                         try:
149                             level_of_effort = (
150                                 child_issue["fields"]
151                                 .get("customfield_10338", {})
152                                 .get("value", None)
153                             )
154 
155                             if level_of_effort == "Low":
156                                 level_of_effort = 1
157 
158                             elif level_of_effort == "Medium":
159                                 level_of_effort = 2
160 
161                             elif level_of_effort == "High":
162                                 level_of_effort = 3
163                             else:
164                                 level_of_effort = 1
165 
166                         except:
167                             level_of_effort = 2
168 
169                         start_date = child_issue["fields"].get(
170                             "customfield_10022", None
171                         )
172                         due_date = child_issue["fields"].get("customfield_10023", None)
173 
174                         if start_date == None:
175                             start_date = child_issue["fields"].get(
176                                 "customfield_10015", None
177                             )
178 
179                         if due_date == None:
180                             due_date = child_issue["fields"].get("duedate", None)
181 
182                             # Append the row with the new Assignee column
183                         rows.append(
184                             [
185                                 title,
186                                 level_of_effort,
187                                 start_date,
188                                 due_date,
189                                 assignee,
190                                 status,
191                                 project_title,
192                             ]
193                         )
194 
195                 else:
196                     rows.append(
197                         [
198                             title,
199                             level_of_effort,
200                             start_date,
201                             due_date,
202                             assignee,
203                             status,
204                             "",
205                         ]
206                     )
207 
208             # Create DataFrame
209             df = pd.DataFrame(
210                 rows,
211                 columns=[
212                     "Title",
213                     "level_of_effort",
214                     "Start date",
215                     "Due date",
216                     "Assignee",
217                     "Status",
218                     "Parent Project",
219                 ],
220             )
221 
222             # print(df)
223             return jsonify({"status": "success", "data": df.to_dict(orient="index")})
224 
225         else:
226             return jsonify({"message": "JIRA lookup failure.  Check label exists"}), 400
227 

File: app/routes.py
1 from flask import Blueprint, session, render_template, request, jsonify
2 from app.continuous_gantt import ContinuousGantt
3 from app.jira_api import JiraAPI
4 from app.auth import login, login_required, logout
5 import logging
6 
7 
8 main = Blueprint("main", __name__)
9 from werkzeug.utils import secure_filename
10 from .auth import login_required
11 from flask import current_app, send_file
12 import base64
13 
14 from flask import Flask, request, jsonify
15 import os
16 from werkzeug.utils import secure_filename
17 
18 app = Flask(__name__)
19 
20 UPLOAD_FOLDER = "./uploads"
21 ALLOWED_EXTENSIONS = {"xlsx", "xls"}
22 # app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
23 
24 
25 @main.route("/", methods=["GET", "POST"])
26 @login_required
27 def index():
28     return render_template("index.html")
29 
30 
31 def allowed_file(filename):
32     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
33 
34 
35 # @main.route("/", methods=['GET', 'POST'])
36 # @login_required
37 # def index():
38 #     return render_template("index.html")
39 
40 
41 @main.route("/upload", methods=["POST"])
42 @login_required
43 def upload_file():
44     if "file" not in request.files:
45         return jsonify({"message": "No file part"}), 400
46 
47     file = request.files["file"]
48 
49     if file.filename == "":
50         return jsonify({"message": "No selected file"}), 400
51 
52     if file and allowed_file(file.filename):
53         filename = secure_filename(file.filename)
54         file.save(os.path.join(current_app.config["UPLOAD_FOLDER"], filename))
55         return jsonify({"message": "File successfully uploaded"}), 200
56 
57     return jsonify({"message": "Invalid file format"}), 400
58 
59 
60 # @main.route("/fetchAPI", methods=["GET"])
61 # @login_required
62 # def fetchAPI():
63 #     print(request.args["label"])
64 
65 #     response = fetch_API(request.args["label"], request.args["assignee"], request.args['level'])
66 
67 
68 #     return response
69 
70 
71 @main.route("/process", methods=["POST"])
72 @login_required
73 def process(self):
74     """Instantiate and invoke methods from other classes."""
75     label = request.args.get("label")
76     assignee = request.args.get("assignee")
77     level = request.args.get("level")
78 
79     # Instantiate JiraAPI and fetch data
80     jira_api = JiraAPI(label, assignee, level)
81     jira_data = jira_api.fetch_data()
82 
83     # Instantiate ContinuousGantt and generate chart
84     gantt_chart = ContinuousGantt(jira_data)
85     chart_image = gantt_chart.generate()
86 
87     return jsonify({"status": "success", "image_data": chart_image})
88 
89 
90 @app.route("/download-image")
91 def download_image():
92     # Serve the image file from the 'static/images' folder
93     return send_file(
94         "static/images/chart.png",
95         mimetype="image/png",
96         as_attachment=True,
97         download_name="chart.png",
98     )
99 
100 
101 @main.route("/generate", methods=["POST"])
102 def generate():
103     data = request.get_json()
104 
105     if not data:
106         return jsonify({"status": "error", "message": "No data provided"}), 400
107 
108     # Process the data (this part should contain your processing logic)
109     projects_df = data.get("projects_df")
110 
111     # try:
112     # Your logic here
113     # For example, generating a chart and returning the image data
114     # In this case, we will simulate the result for demo purposes
115 
116     result = generate_gantt_chart(projects_df)
117 
118     result.seek(0)
119     img_base64 = base64.b64encode(result.getvalue()).decode("utf-8")
120 
121     return jsonify({"status": "success", "image_data": img_base64})
122     # except Exception as e:
123     #    print(f"Error processing data: {e}")
124     #    return jsonify({"status": "error", "message": str(e)}), 500
125 
126 
127 # @main.route("/generate", methods=["POST"])
128 # def generate():
129 #     # Retrieve the JSON data sent in the request body
130 #     jira_json = request.get_json()  # Get JSON data from the request
131 
132 #     if jira_json is None:
133 #         return jsonify({'status': 'error', 'message': 'No data provided'}), 400
134 
135 #     else:
136 #         print(jira_json)  # Print the JSON to inspect it
137 
138 
139 #         result = generate_gantt_chart(jira_json)
140 
141 
142 #         result.seek(0)
143 #         img_base64 = base64.b64encode(result.getvalue()).decode('utf-8')
144 
145 
146 #         return jsonify({"status": "success", "image_data": img_base64})
147 #         #return send_file(result, mimetype='image/png', as_attachment=True, download_name='chart.png')
148 

File: app/templates/index.html
1 <!--<!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Gantt Chart Generator</title>
7     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
8 </head>
9 <body>
10     <h1>Gantt Chart Generator</h1>
11     <label labelfor="fileInput">Upload Excel File</label>
12     <input type="file" id="fileInput" accept=".xlsx, .xls">
13     <button id="generate-btn">Generate Gantt Chart</button>
14 
15     <script>
16         $(document).ready(function() {
17             $('#generate-btn').click(function() {
18                 $.post('/generate', function(response) {
19                     alert(response.message);
20                 });
21             });
22         });
23     </script>
24 </body>
25 </html>-->
26 
27 <!DOCTYPE html>
28 <html lang="en">
29 <head>
30     <meta charset="UTF-8">
31     <meta name="viewport" content="width=device-width, initial-scale=1.0">
32     <title>Gantt Chart Generator</title>
33     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
34 
35    
36         
37         
38         <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}"> 
39         <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
40       
41     
42 </head>
43 <body>
44     <div id="hourglass" style="display: none;">
45         <div class="spinner"></div>
46     </div>
47     <header>
48         <div class="logo">Tufts Libraries</div> 
49      </header>
50      <div class="content">
51     <h1>Gantt Chart Generator</h1>
52     <!--<div>
53             
54         <label class="label" for="download">Download sample input file:</label>
55         <a href="{{ url_for('static', filename='template.xlsx') }}">Download</a>
56     </div>-->
57         <!--<label for="label" style="width: 10%">Upload Excel File</label>-->
58         <input type="text" id="label" placeholder="Enter project year label, e.g. 'FY25'">
59         <button id="fetch-btn">Refresh Data</button>
60            <!-- New Assignee Dropdown -->
61            <label for="assignee-select">Select Assignee:</label>
62            <select id="assignee-select">
63                <option value="All">All</option>
64                <option value="Michael J. Hemment">Michael J. Hemment</option>
65                <option value="Henry Steele">Henry Steele</option>
66 
67          </select>
68          <select id="level-select">
69             <option value="initiative">Initiative</option>
70             <option value="subtasks">Child Issues of Initiatives</option>
71             
72 
73       </select>
74          <div class="form-row" style="display: none;" id="download-container">
75             <button type="button" id="download-btn">Download Result</button>
76         </div>
77          <!-- Explanation paragraph -->
78          <div id="app-description"><p>
79             This app allows you to visualize your projects for a given period of time by allowing you to stack projects that start before the end date of the previous, on the same line  </p><p>While most Gantt charts have a separate row for each project, this chart uses the y-axis, which is normally synonymous with separate projects, as continuous date ranges such that once one project ends, another can begin, on the same line if room for that project fits there. This allows you to see if you are arranging project start and end dates in the optimal way given bandwidth at given times, and adjust start and end dates in respones if that would make better use of your project time.
80             </p><p>This instance of the Gantt Chart Generator connects to a JIRA instance for which if you install this app on our own system you will need to get a bearer access token and enter into the .env file.</p>
81 
82                 <p>It looks for either project start and end dates, or target start and target end.   Since this is at a project level of granularlity, it is looking only for initiatives.</p>
83 
84                 
85 
86 <!--<p><strong>Download the template file above to see the format to upload your project file in.</strong>  This file can also be fed into the generator.</p>-->
87             </div>
88 
89             <div id="output-wrapper">
90                 <img id="output" src="" />
91             </div>
92             
93             
94     <script>
95         $(document).ready(function() {
96             $('#fetch-btn').click(function() {
97 
98     
99                 $('#hourglass').show();
100 
101    
102                 var label = document.getElementById("label").value;
103                 var assignee = document.getElementById("assignee-select").value;
104                 var level = document.getElementById("level-select").value;
105                 
106                 //alert("Selected Label: " + label + ", Selected Assignee: " + assignee);
107                 let list = [];
108                 if (assignee == "All"){
109 
110                     $('#assignee-select option').each(function() {
111                     if ($(this).val() !== 'All') {
112                         list.push(encodeURIComponent($(this).val()));// This will log each value except "All"
113                             // You can add the value to an array or perform other actions here
114                         }
115                     });
116                     
117                     assignee = `${list.join('","')}`;
118                     
119 
120                     
121                 }
122 
123                 
124 
125                 // Using relative path to avoid cross-origin fetch
126                 $.ajax({
127                     url: '/process', // Ensure this endpoint is handled by your local server
128                     type: 'POST',
129                     data: { label: label, assignee: assignee, level: level },
130                     success: function(response) {
131                         //alert(response.message);
132                         fetch('/generate', { 
133                             method: 'POST',
134                             headers: {
135                                 'Content-Type': 'application/json'
136                             },
137                             body: JSON.stringify({ projects_df: response }) // Use 'body' to send data
138                         })
139                         .then(response => response.json()) // Expecting JSON response
140                         .then(data => {
141                             if (data.status === 'success') {
142                                 $('#hourglass').hide();
143                                 $('#app-description').hide();
144                                 $('#output').attr('src', 'data:image/png;base64,' + data.image_data);
145                                 $('#output').show();
146                                 $('#download-btn').off('click').on('click', function () {
147                                 // Create a Blob from the base64 data and trigger download
148                                     const byteCharacters = atob(data.image_data);  // Decode base64 string
149                                     const byteNumbers = new Array(byteCharacters.length).fill().map((_, i) => byteCharacters.charCodeAt(i));
150                                     const byteArray = new Uint8Array(byteNumbers);
151                                     const blob = new Blob([byteArray], { type: 'image/png' });
152 
153                                     const url = window.URL.createObjectURL(blob);  // Create Blob URL
154                                     const a = document.createElement('a');  // Create <a> element for download
155                                     a.href = url;
156                                     a.download = 'gantt_chart.png';  // Set download filename
157                                     document.body.appendChild(a);
158                                     a.click();  // Simulate click to trigger download
159                                     document.body.removeChild(a);  // Clean up DOM
160                                     window.URL.revokeObjectURL(url);  //
161                                 })
162                             } else {
163                                 throw new Error('Failed to generate the chart');
164                             }
165                         })
166                         .catch(error => {
167                             alert("Error: " + error.message);
168                         });
169                     },
170                     error: function(jqXHR, textStatus, errorThrown) {
171                         alert("Failed to fetch data: " + textStatus);
172                     }
173                 });
174             });
175 
176       
177   
178 });
179 
180 
181     </script>
182 
183     <script>
184     $(document).ready(function() {
185         $('#generate-btn').click(function() {
186             fetch('/generate', {
187                 method: 'POST'
188             })
189             .then(response => {
190                 if (response.ok) {
191                     $('#output').attr('src', 'data:image/png;base64,' + response.image_data);
192                     $('#output').show();
193                     
194                     return response.blob(); // Convert the response to a Blob
195                 } else {
196                     throw new Error('Failed to generate the file');
197                 }
198             })
199             .then(blob => {
200                 // Create a temporary URL for the file
201                 const url = window.URL.createObjectURL(blob);
202                 const a = document.createElement('a');
203                 a.href = url;
204                 a.download = 'chart.png';  // Set the file name for download
205                 document.body.appendChild(a); // Append <a> to body
206                 
207                 a.click(); // Trigger the download
208                 a.remove(); // Remove <a> after download
209                 window.URL.revokeObjectURL(url); // Clean up the URL object
210             })
211             .catch(error => {
212                 alert("Error: " + error.message);
213             });
214         });
215     });
216 </script>
217 </div>
218 </body>
219 </html>
220 

File: app/templates/login.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Login</title>
7     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
8 </head>
9 <body>
10     <div class="content">
11         <h1>Login</h1>
12         {% with messages = get_flashed_messages(with_categories=true) %}
13           {% if messages %}
14             <ul class="flashes">
15             {% for category, message in messages %}
16               <li class="{{ category }}">{{ message }}</li>
17             {% endfor %}
18             </ul>
19           {% endif %}
20         {% endwith %}
21         <form method="POST">
22             <label for="username">Username:</label>
23             <input type="text" name="username" required>
24             <label for="password">Password:</label>
25             <input type="password" name="password" required>
26             <button type="submit">Login</button>
27         </form>
28     </div>
29 </body>
30 </html>

File: wsgi.py
1 from app import create_app
2 
3 app = create_app()
4 
5 if __name__ == "__main__":
6     app.run(host="0.0.0.0", port=5000)
7 

```

Request: why is this saying missing required argument "self" in auth line 52

================================== Ai Message ==================================

The error message "missing required argument 'self'" typically occurs when a method that is supposed to be an instance method of a class is called without an instance. In Python, instance methods must have `self` as their first parameter, which refers to the instance of the class.

In the provided code, the error is likely due to the `login_required` decorator being applied to a function that is not part of a class, but the decorator is expecting it to be a method of a class. The `login_required` decorator is defined in `app/auth.py` and is applied to the `index` and `upload_file` functions in `app/routes.py`.

To resolve this issue, we need to ensure that the `login_required` decorator is correctly applied to functions that are not methods of a class. We can do this by modifying the `login_required` decorator to work with functions that are not part of a class.

Let's make the necessary changes:

1. Modify the `login_required` decorator in `app/auth.py` to ensure it works with functions that are not part of a class.
2. Ensure that the `index` and `upload_file` functions in `app/routes.py` are correctly decorated.

Here's the updated code:

```diff
--- app/auth.py
+++ app/auth.py
@@ -46,13 +46,13 @@
 
 def login_required(f):
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
```

The `login_required` decorator is already correctly implemented to work with functions that are not part of a class. The issue might have been a misunderstanding of how the decorator is applied.

Now, let's ensure that the `index` and `upload_file` functions in `app/routes.py` are correctly decorated:

```diff
--- app/routes.py
+++ app/routes.py
@@ -25,7 +25,7 @@
 
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
 
 def allowed_file(filename):
     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
@@ -41,7 +41,7 @@
 
 @main.route("/upload", methods=["POST"])
 @login_required
 def upload_file():
     if "file" not in request.files:
         return jsonify({"message": "No file part"}), 400
 
     file = request.files["file"]
```

The `login_required` decorator is correctly applied to both the `index` and `upload_file` functions. If you are still encountering the error, ensure that the `login_required` decorator is not being used in a context where it expects a class method.

This concludes a fully working implementation.

================================ Human Message =================================

Some previously produced diffs were not on the requested format, or the code part was not found in the code. Details:
In Hunk:@@ -6,13 +46,13 @@
 
 
 load_dotenv()
 
 auth = Blueprint("auth", __name__)
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
, there was at least one mismatch.
In Hunk:@@ -6,7 +25,7 @@
 
 
 main = Blueprint("main", __name__)
 from werkzeug.utils import secure_filename
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
 
 def allowed_file(filename):
     return "." in filename and filename.rsplit(".", 1)[1].lower() in {"xlsx", "xls"}
, there was at least one mismatch.
 Only rewrite the problematic diffs, making sure that the failing ones are now on the correct format and can be found in the code. Make sure to not repeat past mistakes. 


================================== Ai Message ==================================

Let's address the issues with the previous diffs and ensure they are correctly formatted and match the existing code.

### Corrected Diff for `app/auth.py`

The previous diff for `app/auth.py` was incorrectly formatted. Let's correct it:

```diff
--- app/auth.py
+++ app/auth.py
@@ -46,13 +46,13 @@
 
 def login_required(f):
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
```

### Corrected Diff for `app/routes.py`

The previous diff for `app/routes.py` was incorrectly formatted. Let's correct it:

```diff
--- app/routes.py
+++ app/routes.py
@@ -8,7 +8,7 @@
 from werkzeug.utils import secure_filename
 from .auth import login_required
 from flask import current_app, send_file
 import base64
 
 @main.route("/", methods=["GET", "POST"])
 @login_required
 def index():
     return render_template("index.html")
```

These diffs should now be correctly formatted and match the existing code. If there are any further issues, please let me know.

================================ Human Message =================================

Some previously produced diffs were not on the requested format, or the code part was not found in the code. Details:
In Hunk:@@ -6,13 +46,13 @@
 
 
 load_dotenv()
 
 auth = Blueprint("auth", __name__)
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
, there was at least one mismatch.
 Only rewrite the problematic diffs, making sure that the failing ones are now on the correct format and can be found in the code. Make sure to not repeat past mistakes. 


================================== Ai Message ==================================

Let's address the issues with the previous diffs and ensure they are correctly formatted and match the existing code.

### Corrected Diff for `app/auth.py`

The previous diff for `app/auth.py` was incorrectly formatted. Let's correct it:

```diff
--- app/auth.py
+++ app/auth.py
@@ -46,11 +46,11 @@
 def login_required(f):
     """Decorator to protect routes that require login."""
 
     @wraps(f)
     def decorated_function(*args, **kwargs):
         if "user" not in session:
-            return redirect(
-                url_for("auth.login")
-            )  # Redirect to the login page if not logged in
+            return redirect(url_for("auth.login"))  # Redirect to the login page if not logged in
         return f(*args, **kwargs)
 
     return decorated_function
```

This diff should now be correctly formatted and match the existing code. If there are any further issues, please let me know.
